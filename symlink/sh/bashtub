#!/bin/bash

shopt -s expand_aliases

declare -i TEST_CASE_COUNT=0
declare -a FAILED_CASES=()
declare -a FAILURE_LOCATIONS=()
declare -a FAILURE_REASONS=()

to_sentence() {
  declare space_separated
  space_separated=${1#testcase_}
  space_separated=${space_separated//_/ }
  echo "${space_separated^}"
}

assert_equal_matcher() {
  echo "\`$1' expected but was \`$2'"
  [[ "$1" == "$2" ]]
}

assert_match_matcher() {
  echo "\`$2' was expected to match \`$1'"
  [[ "$2" =~ $1 ]]
}

assert_true_matcher() {
  echo "\`$*' was expected to return true"
  subject "$@"
  [[ $status -eq 0 ]]
}

assert_false_matcher() {
  echo "\`$*' was expected to return false"
  subject "$@"
  [[ $status -ne 0 ]]
}

located_assertion_base() {
  declare location case_name matcher
  location="$1:$2:in \`$3'"
  case_name=$(to_sentence "$3")
  matcher=$4
  shift; shift; shift; shift

  TEST_CASE_COUNT+=1
  reason=$($matcher "$@")
  if [[ $? -eq 0 ]]; then
    echo -en '\e[32m.\e[m'
  else
    echo -en "\e[31mF\e[m"
    FAILED_CASES=("${FAILED_CASES[@]}" "$case_name")
    FAILURE_LOCATIONS=("${FAILURE_LOCATIONS[@]}" "$location")
    FAILURE_REASONS=("${FAILURE_REASONS[@]}" "$reason")
  fi
}

subject() {
  eval "$({ err=$({ out=$(eval $@); sta=$?; } 2>&1; declare -p out sta >&2); declare -p err; } 2>&1)"
  stdout="$out" stderr="$err" status="$sta"
}

print_result() {
  echo -e '\n'

  if [[ ${#FAILED_CASES[@]} -eq 0 ]]; then
    echo "$TEST_CASE_COUNT examples, 0 failures"
    return 0
  else
    echo "Failers:"
    for ((i = 0; i < ${#FAILED_CASES[@]}; ++i)) {
      echo -e "$((i + 1))) ${FAILED_CASES[$i]}"
      echo -e "    \e[31m${FAILURE_LOCATIONS[$i]}\e[m"
      echo -e "    \e[31m${FAILURE_REASONS[$i]}\e[m"
    }
    echo
    echo "\e[31m$TEST_CASE_COUNT examples, ${#FAILED_CASES[@]} failures\e[m"
    return 1
  fi
}

declare_assertions() {
  local matcher
  for matcher in $(compgen -A function | grep '_matcher$'); do
    aliased_id=${matcher%_matcher}
    alias $aliased_id='located_assertion_base $BASH_SOURCE $LINENO $FUNCNAME '"$matcher"
  done
}

help_and_exit() {
  echo "\
Usage: $0 [OPTION]... SOURCE_FILE...
Run a unit-test from SOURCE_FILE(s).

    --help     display this help and exit
    --version  output version information and exit"
  exit 0
}

version_and_exit() {
  echo "bashtub 0.1"
  exit 0
}

unrecognized_option_and_exit() {
  echo "\
$0: unrecognized option -- \`$1'
Try \`$0 --help' for more information." >&2
  exit 1
}

missing_operand_and_exit() {
  echo "\
$0: missing operand
Try \`$0 --help' for more information." >&2
  exit 1
}

[ $# -eq 0 ] && missing_operand_and_exit
for param in "$@"; do
  case $param in
  --help) help_and_exit;;
  --version) version_and_exit;;
  --*) unrecognized_option_and_exit "${param#--}" ;;
  *) break ;;
  esac
  shift
done

declare_assertions

for f in "$@"; do
  unset teardown setup
  # shellcheck source=/dev/null
  source "$f"
  hash setup 2>/dev/null && setup
  for testcase in $(compgen -A function | grep '^testcase_'); do
    $testcase
    unset "$testcase"
  done
  hash teardown 2>/dev/null && teardown
done

print_result
