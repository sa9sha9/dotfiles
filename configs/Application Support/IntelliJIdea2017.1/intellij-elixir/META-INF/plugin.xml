<idea-plugin version="2">
  <id>org.elixir_lang</id>
  <name>Elixir</name>
  <version>5.1.0</version>
  <vendor email="Kronic.Deth@gmail.com">Luke Imhoff</vendor>
  <description>
      Elixir plugin
    </description>
  <change-notes>
      &lt;h1&gt;v5.1.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Graphical debugger with line breakpoints&lt;/li&gt;
            &lt;li&gt;Add Debugger to README&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Replace &lt;code&gt;assert scope.isEquivalentTo(lastParent.getParent())&lt;/code&gt; with an &lt;code&gt;if&lt;/code&gt; and log
              what &lt;code&gt;lastParent&lt;/code&gt; was when condition is &lt;code&gt;false&lt;/code&gt;, so root cause can be traced.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v5.0.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;
                Decompile &lt;code&gt;.beam&lt;/code&gt; files
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Structure view for decompiled &lt;code&gt;.beam&lt;/code&gt; files&lt;/li&gt;
                &lt;li&gt;Index modules, functions, and macros exported by &lt;code&gt;.beam&lt;/code&gt; files&lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;Go To Symbol for Modules defined in &lt;code&gt;.beam&lt;/code&gt; files (both SDK and deps)&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;Erlang using atoms (like &lt;code&gt;:idna&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;Elixir using Alias (like &lt;code&gt;Enum&lt;/code&gt;)&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;Completion for Modules defined in &lt;code&gt;.beam&lt;/code&gt; files (both SDK and deps)&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;Elixir using Alias (like &lt;code&gt;Enum&lt;/code&gt;)&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;Completion for functions and macros exported by &lt;code&gt;.beam&lt;/code&gt; files&lt;/li&gt;
                &lt;li&gt;Syntax highlighting&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/pull/575"&gt;#575&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Macros appear before functions in decomplied &lt;code&gt;.beam&lt;/code&gt; files&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Header for macro and function sections&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Update &lt;code&gt;ELIXIR_VERSION&lt;/code&gt; for &lt;code&gt;1.2.*&lt;/code&gt; from &lt;code&gt;1.2.3&lt;/code&gt; to &lt;code&gt;1.2.6&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;Add &lt;code&gt;ELIXIR_VERSION&lt;/code&gt; &lt;code&gt;1.3.4&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Add &lt;code&gt;ELIXIR_VERSION&lt;/code&gt; &lt;code&gt;1.4.0&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Update &lt;code&gt;IDEA&lt;/code&gt; for &lt;code&gt;2016.*&lt;/code&gt; to &lt;code&gt;2016.3.1&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Show &lt;code&gt;OtpErlangBitStr&lt;/code&gt; (and therefore &lt;code&gt;OtpErlangBinary&lt;/code&gt; contents when tests fail
            &lt;/li&gt;
            &lt;li&gt;
              Quote binaries as &lt;code&gt;to_charlist&lt;/code&gt; instead of &lt;code&gt;to_char_list&lt;/code&gt; for Elixir
              &lt;code&gt;&amp;lt;= 1.3&lt;/code&gt;.  Depends on Elixir version of project SDK.
            &lt;/li&gt;
            &lt;li&gt;
              Use &lt;code&gt;elixir&lt;/code&gt; instead of &lt;code&gt;java&lt;/code&gt; VM, so now Erlang and Elixir don't need to be built
              on travis-ci, but &lt;code&gt;ant&lt;/code&gt; and the &lt;code&gt;jdk&lt;/code&gt; need to be installed, but unlike Erlang and
              Elixir, there are tarballs for that, so this way is faster than the old method without depending on
              Travis-CI cache.
            &lt;/li&gt;
            &lt;li&gt;
              If &lt;code&gt;multiResolve&lt;/code&gt; causes a &lt;code&gt;StackOverflow&lt;/code&gt; for
              &lt;code&gt;org.elixir_lang.annotator.Callable.visitCall&lt;/code&gt;, then &lt;code&gt;catch&lt;/code&gt; it and use
              &lt;code&gt;errorreport&lt;/code&gt; logger to log the element.
            &lt;/li&gt;
            &lt;li&gt;Include file path in &lt;code&gt;errorreport&lt;/code&gt; excerpt&lt;/li&gt;
            &lt;li&gt;Log element for &lt;code&gt;StackOverflow&lt;/code&gt; related to &lt;code&gt;import&lt;/code&gt;s&lt;/li&gt;
            &lt;li&gt;Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/605"&gt;#605&lt;/a&gt;.&lt;/li&gt;
            &lt;li&gt;
              Log &lt;code&gt;LookupElement#getObject&lt;/code&gt; when &lt;code&gt;LookupElement#getPsiElement&lt;/code&gt; is
              &lt;code&gt;null&lt;/code&gt; to track down how it was &lt;code&gt;null&lt;/code&gt; in
              &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/563"&gt;#563&lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/559"&gt;#559&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Switch to Gradle for builds.&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;code&gt;./gradlew runIde&lt;/code&gt; (or the &lt;code&gt;runIde (VERSION)&lt;/code&gt; Run Configurations) will run IDEA
                  in a sandbox with the development version of the plugin.
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;./gradlew test&lt;/code&gt; (or the &lt;code&gt;test (VERSION)&lt;/code&gt; Run Configurations) will run the main
                  plugin and jps-builder tests.
                &lt;/li&gt;
                &lt;li&gt;
                  The plugin can now be published with &lt;code&gt;./gradlew publishPlugin&lt;/code&gt;, &lt;b&gt;BUT&lt;/b&gt; you'll need to
                  fill in &lt;code&gt;publish*&lt;/code&gt; properties in &lt;code&gt;gradle.properties&lt;/code&gt;.  This will
                  &lt;i&gt;eventually&lt;/i&gt; allow for automated "nightlies" from successful Travis-CI builds on
                  &lt;code&gt;master&lt;/code&gt;.
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              The &lt;code&gt;Callable&lt;/code&gt; annotator is meant for variables, parameters, and macro and function calls and
              declarations.  The &lt;code&gt;ModuleAttribute&lt;/code&gt; annotator handles module attribute declaration and usage,
              so we can save reference resolution time by skipping module attributes in &lt;code&gt;Callable&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;Allow module attribute folding to be configured.&lt;/li&gt;
            &lt;li&gt;
                Allow call definition heads to resolves to themselves for consistency with Aliases of
                &lt;code&gt;defmodule&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
                Generalize &lt;code&gt;Callable.callDefinitionClauseDefiner(Call)&lt;/code&gt;: in addition to the current
                &lt;code&gt;CallDefinitionClause&lt;/code&gt;, make it work for &lt;code&gt;Implementation&lt;/code&gt;, &lt;code&gt;Module&lt;/code&gt;,
                and &lt;code&gt;Protocol&lt;/code&gt;.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Fix copy-paste errors in &lt;code&gt;MatchOperatorInsteadOfTypeOperator&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Subtract 1 from arity in &lt;code&gt;.beam&lt;/code&gt; file when decompiling to &lt;code&gt;defmacro&lt;/code&gt; calls because
              the Erlang function for Elixir macros has one addition argument: the first argument is the
              &lt;code&gt;Caller&lt;/code&gt; of the macro.
            &lt;/li&gt;
            &lt;li&gt;
              If the name of the decompiled macro/function is an infix operator, then decompile the head as a binary
              operation instead of a normal prefix name as infix operators aren't valid prefix names and led to parsing
              errors, which was the root cause of &lt;a href="https://github.com/KronicDeth/intellij-elixir/pull/575"&gt;#575&lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt;Fix IntelliJ warnings in &lt;code&gt;BeamFileImpl&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Remove unused &lt;code&gt;VirtualFile&lt;/code&gt; argument to &lt;code&gt;BeamFileImpl#buildFileStub&lt;/code&gt;.&lt;/li&gt;
            &lt;li&gt;
              Add &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;=~&lt;/code&gt;, and &lt;code&gt;in&lt;/code&gt; to &lt;code&gt;INFIX_OPERATOR_SET&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Only render infix operators if arity is &lt;code&gt;2&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Prefix operator decompilation: &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; are both binary and unary operators.
              When a unary operator they need to be wrapped in parentheses, so that the call definition clause is parsed
              correctly.
            &lt;/li&gt;
            &lt;li&gt;Ignore &lt;code&gt;JFLex&lt;/code&gt; jar&lt;/li&gt;
            &lt;li&gt;Don't check for &lt;code&gt;elixir-lang/elixr&lt;/code&gt; files remove in &lt;code&gt;1.3&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Allow &lt;code&gt;nil&lt;/code&gt; as a keyword key.  &lt;code&gt;nil&lt;/code&gt; was being lexed as a potential keyword key, but
              &lt;code&gt;NIL&lt;/code&gt; was missing from the token list in the keywordKey grammar rule.
            &lt;/li&gt;
            &lt;li&gt;
              Some SpecialForms don't work as literals as they would be interpreted as metaprogramming, so their name
              needs to be wrapped as an atom to &lt;code&gt;unquote&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;Check children of &lt;code&gt;MultipleAliases&lt;/code&gt; for variable declarations.&lt;/li&gt;
            &lt;li&gt;Treat any variable declared in a &lt;code&gt;MultipleAliases&lt;/code&gt; as invalid.&lt;/li&gt;
            &lt;li&gt;
              Skip &lt;code&gt;import Kernel&lt;/code&gt; in &lt;code&gt;kernel.ex&lt;/code&gt; to prevent stack overflow due to recursive
              &lt;code&gt;import&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Strip all outer parentheses for left type operand, so that &lt;code&gt;(+value)&lt;/code&gt; can be see as
              &lt;code&gt;+&lt;/code&gt; operator type spec.
            &lt;/li&gt;
            &lt;li&gt;
              Use advice from &lt;code&gt;IndexNotReadyException&lt;/code&gt; documentation and check
              &lt;code&gt;DumbService.isDumb(Project)&lt;/code&gt; before calling &lt;code&gt;StubIndex.getElements&lt;/code&gt; in
              &lt;code&gt;Module&lt;/code&gt; and &lt;code&gt;module.MultiResolve.indexNameElements&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Don't &lt;code&gt;assert&lt;/code&gt; that &lt;code&gt;LookupElement#getPsiElement&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt; in
              &lt;code&gt;CallDefinitionCluase.renderElement&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;Update to &lt;code&gt;ant&lt;/code&gt; &lt;code&gt;1.10.1&lt;/code&gt; because &lt;code&gt;1.10.0&lt;/code&gt; is no longer hosted.&lt;/li&gt;
            &lt;li&gt;
              Yeah, it sounds weird, but an &lt;code&gt;ElixirVariable&lt;/code&gt; isn't necessarily a variable if it doesn't occur in a
              declaration context.  It could just be a no-parentheses function call in the wrong spot, so check the
              parent &lt;code&gt;PsiElement&lt;/code&gt; to determine if &lt;code&gt;ElixirVariable&lt;/code&gt; is a variable.
            &lt;/li&gt;
            &lt;li&gt;
              Highlight parameterized type head (&lt;code&gt;maybe(t)&lt;/code&gt; in &lt;code&gt;@type maybe(t)&lt;/code&gt;) the same as a
              full type definition (&lt;code&gt;maybe(t)&lt;/code&gt; in &lt;code&gt;@type maybe(t) :: t | nil&lt;/code&gt;)
            &lt;/li&gt;
            &lt;li&gt;
              Only show Mix ExUnit Run in context when the module, or when the module is not a available, the project
              SDK is Elixir.  If there is no SDK configured, show "Mix ExUnit Run" in the menu.
            &lt;/li&gt;
            &lt;li&gt;Mark &lt;code&gt;do:&lt;/code&gt; as atom in demo text&lt;/li&gt;
            &lt;li&gt;
              Annotations can only be applied to the single, active file, which belongs to the &lt;code&gt;referrer&lt;/code&gt;
              &lt;code&gt;Callable&lt;/code&gt;.  The &lt;code&gt;resolved&lt;/code&gt; may be outside the file if it is a cross-file function
              or macro usage, in which case it's &lt;code&gt;TextRange&lt;/code&gt; should not be highlighted because it is
              referring to offsets in a different file.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;Variable&lt;/code&gt; scope for &lt;code&gt;QualifiedMultipleAliases&lt;/code&gt;, which occurs when qualified call
              occurs over a line with assignment to a tuple, such as
              &lt;pre&gt;&lt;code&gt;
Qualifier.
{:ok, value} = call()&lt;/code&gt;&lt;/pre&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Remove call definition clauses (function or macro) completion for bare words as it had a detrimental
              impact on typing feedback (the editor still took input, but it wasn't rendered until the completion
              returned OR &lt;code&gt;ESC&lt;/code&gt; was hit to cancel the completion, which became excessive once the index of
              call definition clauses was expanded by the decompilation of the Elixir standard library
              &lt;code&gt;.beam&lt;/code&gt;s, so disable it.  If bare-words completion is restored.  It will either (1) need to
              not use the &lt;code&gt;Reference#getVariants()&lt;/code&gt; API because it generates too many objects that need to
              be thrown away or (2) need to only complete call definition clauses that are provably in-scope from
              imports or other macros.
            &lt;/li&gt;
            &lt;li&gt;
              Both intellij-erlang and intellij-community are Apache 2.0 licensed and its the default license for Elixir
              projects, so seems like a good choice for &lt;code&gt;LICENSE.md&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;Add &lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
                The run configurations I put together in
                &lt;a href="https://github.com/KronicDeth/intellij-elixir/pull/504"&gt;#504&lt;/a&gt;
                didn't allow for the debugger to work properly: neither pause nor breakpoints had any effect, so
                regenerate them from the Gradle pane.
            &lt;/li&gt;
            &lt;li&gt;
              Check parent of &lt;code&gt;when&lt;/code&gt; operation in case it's a guarded function head in
              &lt;code&gt;org.elixir_lang.annonator.Parameter.putParameterized(Parameter, PsiElement)&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Instead of highlighting call definition clauses when they are referred to, which only works if it is in
              the same file, highlight all function and macro declarations when the &lt;code&gt;def*&lt;/code&gt; call is
              encountered.
            &lt;/li&gt;
            &lt;li&gt;
              Only increment arity for right pipe operand instead of all operands, so that left operands resolve to
              correct arity or as variable/parameter.
            &lt;/li&gt;
            &lt;li&gt;
                Override &lt;code&gt;ModuleImpl#getProject()&lt;/code&gt; to prevent &lt;code&gt;StackOverflowError&lt;/code&gt;.  Without
                overriding &lt;code&gt;#getProject()&lt;/code&gt;, &lt;code&gt;IdentifierHighlighterPass&lt;/code&gt; gets stuck in a loop
                between &lt;code&gt;getManager&lt;/code&gt; and &lt;code&gt;getProject&lt;/code&gt; on the target (the &lt;code&gt;ModuleImpl&lt;/code&gt;)
                when clicking on the space between &lt;code&gt;def&lt;/code&gt;s or &lt;code&gt;defmacro&lt;/code&gt;s in the decompiled
                &lt;code&gt;.beam&lt;/code&gt; files.
            &lt;/li&gt;
            &lt;li&gt;Fix source formatting&lt;/li&gt;
            &lt;li&gt;Skip looking for variables unless 0-arity AND no arguments&lt;/li&gt;
            &lt;li&gt;
              Highlight unresolved macros as macro calls. Anything with a do keyword or a do block will be treated like
              a macro call even if it can't be resolved.  No resolved is either no resolve results or an empty list
            &lt;/li&gt;
            &lt;li&gt;Implicit imports at top of file in addition to top of Module.&lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;CallDefinitionClause&lt;/code&gt; completion provider is unexpectedly invoked both when &lt;code&gt;.&lt;/code&gt; is
              typed, but continues to be invoked after a letter is typed after the &lt;code&gt;.&lt;/code&gt;; however, once the
              letter is typed, the letter becomes the default prefix instead, so the prefix should only be reset to
              &lt;code&gt;""&lt;/code&gt; when it ends in &lt;code&gt;.&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Disable &lt;code&gt;Callable#getVariants&lt;/code&gt; unless &lt;code&gt;Unqualified&lt;/code&gt; to  prevents local functions and
              macros being shown as completions for qualified names.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                Among many other tweaks, the String color is now green, so that Atom and String are no longer close to
                one another, which was the original issue in
                &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/569"&gt;#569&lt;/a&gt;
              &lt;/p&gt;
              &lt;img width="760" alt="screen shot 2017-04-09 at 9 44 06 pm" src="https://cloud.githubusercontent.com/assets/298259/24844071/b1c9b51a-1d6d-11e7-8647-46a5075b12d9.png"&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;code&gt;Alias&lt;/code&gt; now has &lt;code&gt;underscored&lt;/code&gt; effect&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Brackets&lt;/code&gt; are now greenish instead of brownish&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Callbacks&lt;/code&gt; are now a lighter blue and has &lt;code&gt;underscored&lt;/code&gt; effect&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;CharList&lt;/code&gt; is little lighter&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;CharToken&lt;/code&gt; is dark yellow now instead of dark purple&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Dot&lt;/code&gt; is now purple instead of dark red&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Expression Substitution Mark&lt;/code&gt; is a little lighter&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Interpolation&lt;/code&gt; is now lime green&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Kernel Macros&lt;/code&gt; are a burnt orange&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Map&lt;/code&gt; is now a dark blue instead of a dark yellow&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Operation Sign&lt;/code&gt; is a little lighter&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Parameters&lt;/code&gt; are a little darker&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Parentheses&lt;/code&gt; are redder&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Predefined&lt;/code&gt; is orange instead of blue&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Specification&lt;/code&gt; is now red instead of purple&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Struct&lt;/code&gt; is now purple instead of yellow&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Type&lt;/code&gt; is now green instead of dark purple&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Variable&lt;/code&gt; is more tealish&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;Fix indentation to fix sub-lists in &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Fix pluralization in &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Check if resolve results are &lt;code&gt;null&lt;/code&gt; for &lt;code&gt;For.resolveResultList&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Check if &lt;code&gt;Protocol.resolveResultList&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Check &lt;code&gt;match&lt;/code&gt; &lt;code&gt;Call&lt;/code&gt; is an &lt;code&gt;UnqualifiedNoArgumentCall&lt;/code&gt;, in addition to
              being 0 resolved final arity, before checking if the name matches.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Incompatible Changes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Move &lt;code&gt;^^^&lt;/code&gt; to its own three-operator precedence level to match &lt;code&gt;1.2&lt;/code&gt;.  This does
              mean the parsing will be wrong for Elixir &lt;code&gt;1.1&lt;/code&gt;, but is simpler than maintaining two grammars
              for those that are still using Elixir &lt;code&gt;1.1&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              The &lt;code&gt;ant&lt;/code&gt; build files have been removed.  To build the build plugin (for Install From Disk),
              use the &lt;code&gt;./gradlew buildPlugin&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;Allow module attribute folding to be configured.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v4.7.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Use the &lt;code&gt;CommonProgramParametersPanel&lt;/code&gt; to get the working directory and environment variables
              the same way the JUnit form does.  Replace the custom "Command" input with the "Program arguments" input
              built into the &lt;code&gt;CommonProgramParametersPanel&lt;/code&gt;. &lt;code&gt;CommonProgramParametersPanel&lt;/code&gt;
              expects to store the "Program Arguments" in a "ProgramParameters" field, so old run configurations will
              lose their "Command" option value and it will be migrated to the new "ProgramParameters".
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Create / Run Mix ExUnit Run Configurations&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Run Configuration from Directory&lt;/li&gt;
                &lt;li&gt;Run Configuration from File&lt;/li&gt;
                &lt;li&gt;Run Configuration from LIne&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Run Configurations support Common Program Parameters&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Program Arguments&lt;/li&gt;
                &lt;li&gt;Working directory&lt;/li&gt;
                &lt;li&gt;Environment variables&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;enclosingMacroCall&lt;/code&gt; returns enclosing macro call when parent is &lt;code&gt;ElixirDoBlock&lt;/code&gt;, so
              that &lt;code&gt;end&lt;/code&gt; element goes to the macro call.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;Navigate &gt; Test&lt;/code&gt; will go to the Module that has the same canonical name as the current
              &lt;code&gt;defimpl&lt;/code&gt;, &lt;code&gt;defmodule&lt;/code&gt;, &lt;code&gt;defprotocol&lt;/code&gt; , or &lt;code&gt;quote&lt;/code&gt; with a
              &lt;code&gt;Test&lt;/code&gt; suffix added
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;Navigate &amp;gt; Test Subject&lt;/code&gt; will go to the &lt;code&gt;defimpl&lt;/code&gt;, &lt;code&gt;defmodule&lt;/code&gt;,
              &lt;code&gt;defprotocol&lt;/code&gt;, or &lt;code&gt;quote&lt;/code&gt; that has the same canonical name as the current Module
              with the &lt;code&gt;Test&lt;/code&gt; suffix removed.
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/500"&gt;#500&lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/517"&gt;#517&lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/521"&gt;#521&lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt;Regression test for #525&lt;/li&gt;
            &lt;li&gt;
              If &lt;code&gt;:&lt;/code&gt; is used instead of &lt;code&gt;::&lt;/code&gt; for a type specification, mark it as an error with
              a Quick Fix to convert &lt;code&gt;:&lt;/code&gt; to &lt;code&gt; ::&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;Highlight &lt;code&gt;=&lt;/code&gt; operands the same as &lt;code&gt;::&lt;/code&gt; operands in type specifications.&lt;/li&gt;
            &lt;li&gt;
              If &lt;code&gt;=&lt;/code&gt; is used instead of &lt;code&gt;::&lt;/code&gt; in a type specification, mark it as an error with a
              Quick Fix to convert &lt;code&gt;=&lt;/code&gt; to &lt;code&gt;::&lt;/code&gt;.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Fix typo: &lt;code&gt;myRunInModuleChekcBox&lt;/code&gt; =&gt; &lt;code&gt;myRunInModuleCheckBox&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Don't log error when name length exceeds presentable text length because it appears to be common for
              normal users and not a development environment artifact.
            &lt;/li&gt;
            &lt;li&gt;
              Check parent of &lt;code&gt;ElixirMultipleAliases&lt;/code&gt; for &lt;code&gt;isVariable&lt;/code&gt; because
              &lt;code&gt;ElixirMultipleAliases&lt;/code&gt; can be hit in &lt;code&gt;isVariable&lt;/code&gt; when &lt;code&gt;MyAlias.&lt;/code&gt; is
              added on a line above a pre-existing tuple, such as when typing a new qualified call.
            &lt;/li&gt;
            &lt;li&gt;Add space between variable and match in lookup element presentation&lt;/li&gt;
            &lt;li&gt;
              Check &lt;code&gt;VirtualFile&lt;/code&gt; is not null before creating attachment because &lt;code&gt;PsiFile&lt;/code&gt; can
              lack a &lt;code&gt;VirtualFile&lt;/code&gt; if the &lt;code&gt;PsiFile&lt;/code&gt; only exists in memory.
            &lt;/li&gt;
            &lt;li&gt;
              Convert &lt;code&gt;CallDefinitionClause(Call)&lt;/code&gt; to &lt;code&gt;CallDefinitionClause.fromCall(Call)&lt;/code&gt;, so
              that &lt;code&gt;null&lt;/code&gt; can be returned when &lt;code&gt;CallDefinitionClause.enclosingModular(Call)&lt;/code&gt;
              returns &lt;code&gt;null&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Use &lt;code&gt;functionName&lt;/code&gt; instead of &lt;code&gt;getName&lt;/code&gt; when multiresolving unqualified functions
              because &lt;code&gt;getName&lt;/code&gt; will return the Alias when called on &lt;code&gt;defmodule&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;maybeQualifiedCallToModular&lt;/code&gt; returned &lt;code&gt;null&lt;/code&gt; BOTH (1) if the call was unqualified
              OR (2) if the call was qualified, but its modular could not be resolved, so qualified calls to
              &lt;code&gt;.beam&lt;/code&gt;-only modules, like &lt;code&gt;File.read!&lt;/code&gt; returned &lt;code&gt;null&lt;/code&gt; because
              &lt;code&gt;File&lt;/code&gt; could not be resolved to a modular.  Remove &lt;code&gt;maybeqQualifiedToModular&lt;/code&gt; and
              call &lt;code&gt;qualifiedToModular&lt;/code&gt; when &lt;code&gt;myElement&lt;/code&gt; is qualified.  If the modular is
              &lt;code&gt;null&lt;/code&gt;, then return an empty &lt;code&gt;ResolveResult[]&lt;/code&gt; instead of looking for unqualified
              matches.
            &lt;/li&gt;
            &lt;li&gt;
              Pass &lt;code&gt;maxScope&lt;/code&gt; to &lt;code&gt;Module&lt;/code&gt; reference.  &lt;code&gt;maxScope&lt;/code&gt; is generally the
              containing file for the element, but when using &lt;code&gt;Module&lt;/code&gt; to resolve &lt;code&gt;import&lt;/code&gt;s, it is
              the &lt;code&gt;import&lt;/code&gt; call's parent element, so that the resolve doesn't ricochet between the
              &lt;code&gt;defmodule&lt;/code&gt; and its child, the &lt;code&gt;import&lt;/code&gt; call until &lt;code&gt;StackOverflowError&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              A variable cannot be declared in update arguments, so return &lt;code&gt;LocalSearchScope.EMPTY&lt;/code&gt;, the same
              as interpolation.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;ElixirSystemUtil.getProcessOutput&lt;/code&gt; already allowed for an empty, invalid
              &lt;code&gt;ProcessOutput&lt;/code&gt; when the &lt;code&gt;workDir&lt;/code&gt; wasn't a directory, so allow it to also be
              &lt;code&gt;null&lt;/code&gt; and return the empty &lt;code&gt;ProcessOutput&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              If a single keyword pair is used for a type spec, treat &lt;code&gt;:&lt;/code&gt; as a type for &lt;code&gt;::&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Limit variable use scope for variables "declared" in module attributes to the module attribute because the
              variable can't be declared there and it is really a variable usage without declaration.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v4.6.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/453"&gt;#453&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/446"&gt;#446&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Show element class in all error reports
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/465"&gt;#465&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/458"&gt;#458&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/443"&gt;#443&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/462"&gt;#462&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/468"&gt;#468&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/469"&gt;#469&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Highlight Strings and String Heredocs as errors in types.
            &lt;/li&gt;
            &lt;li&gt;
              Regression tests for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/470"&gt;#470&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Add &lt;code&gt;Qualified#qualifier&lt;/code&gt; by extracting it from &lt;code&gt;CallDefinitionClause&lt;/code&gt;
              &lt;code&gt;CompletionProvider&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Add &lt;code&gt;Modular&lt;/code&gt; class with &lt;code&gt;#forEachCallDefinitionClauseNameIdentifier&lt;/code&gt; to enumerate
              all the identifiers that could be linked to in a modular.
            &lt;/li&gt;
            &lt;li&gt;
              Add &lt;code&gt;ElixirPsiImplUtil#maybeQualifiedCallToModular&lt;/code&gt; by extracting
              &lt;code&gt;resolveFully&lt;/code&gt; from &lt;code&gt;CallDefinitionClause&lt;/code&gt; &lt;code&gt;CompletionProvider&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Add regression tests for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/463"&gt;#463&lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/471"&gt;#471&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/pull/472"&gt;#472&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Extract &lt;code&gt;Arrow&lt;/code&gt; interface for &lt;code&gt;*ArrowOperation&lt;/code&gt;s.
            &lt;/li&gt;
            &lt;li&gt;
              Regression tests for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/480"&gt;#480&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Return &lt;code&gt;emptySet&lt;/code&gt; when &lt;code&gt;lookupElementByPsiElement&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Don't do a naked &lt;code&gt;assert&lt;/code&gt; that there are 2 children because this can fail during error recovery
              on the operand, instead use the &lt;code&gt;prefix.Normalized.operand()&lt;/code&gt; through
              &lt;code&gt;prefix.operand()&lt;/code&gt;.

              &lt;strong&gt;WARNING: This changes the &lt;code&gt;@NotNull&lt;/code&gt; array so that its sole element changes from
              &lt;code&gt;@NotNull&lt;/code&gt; to &lt;code&gt;@Nullable&lt;/code&gt;.  It may trigger new bugs.&lt;/strong&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Use shipped &lt;code&gt;GeneratedParserUtilBase.DUMMY_BLOCK&lt;/code&gt; because the &lt;code&gt;DUMMY_BLOCK&lt;/code&gt;
              &lt;strong&gt;MUST&lt;/strong&gt; match the &lt;code&gt;GeneratedParserUtilBase&lt;/code&gt; to detect dummy blocks inserted for
              error handling.
            &lt;/li&gt;
            &lt;li&gt;
              Skip over &lt;code&gt;ElixirNoParenthesesStrict&lt;/code&gt; for &lt;code&gt;isVariable&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
             Allow newlines before &lt;code&gt;do&lt;/code&gt; in &lt;code&gt;doBlock&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Don't match &lt;code&gt;do&lt;/code&gt; or &lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; when used as a keyword key.
            &lt;/li&gt;
            &lt;li&gt;
              Check if &lt;code&gt;iterator.atEnd()&lt;/code&gt; before calling &lt;code&gt;iterator.getTokenType()&lt;/code&gt; to avoid
              &lt;code&gt;IndexOutOfBounds&lt;/code&gt; exception
            &lt;/li&gt;
            &lt;li&gt;
              Don't add current call definition clause being written to completion
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;When#leftOperand&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt; (because it's normalized) if there are
              left-hand error elements, but when stripping guards we want best-effort to match human expectations, so
              don't use normalized &lt;code&gt;null&lt;/code&gt;, but use left, non-error element if it is unique.
            &lt;/li&gt;
            &lt;li&gt;
              Highlight types in &lt;code&gt;QualifiedNoParenthesesCall&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Still not obvious why &lt;code&gt;name&lt;/code&gt; for a &lt;code&gt;CallDefinitionClause&lt;/code&gt; lookup renderer can be
              longer than &lt;code&gt;presentableText&lt;/code&gt;, so still log an error, but with &lt;code&gt;Logger.error&lt;/code&gt;, so we
              get &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;presentableText&lt;/code&gt;, and the original &lt;code&gt;element&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Skip &lt;code&gt;Arguments&lt;/code&gt; elements in &lt;code&gt;previousParentExpresion&lt;/code&gt; to eliminate an unnecessary
              level of processing declarations since calls will enter their arguments.
            &lt;/li&gt;
            &lt;li&gt;
              Only put new &lt;code&gt;ENTRANCE&lt;/code&gt; in &lt;code&gt;ResolveState&lt;/code&gt; in
              &lt;code&gt;variable.MultiResolve.resolveResultList&lt;/code&gt;, so that caller can override the default value.
            &lt;/li&gt;
            &lt;li&gt;
              Set &lt;code&gt;ENTRANCE&lt;/code&gt; to &lt;code&gt;matchAncestor&lt;/code&gt; instead of previous expression to eliminate the
              looping that occurred when a variable was unbound (or a function) because the check for &lt;code&gt;with&lt;/code&gt;
              (and &lt;code&gt;for&lt;/code&gt;) was expecting the &lt;code&gt;ENTRANCE&lt;/code&gt; to be the previous child expression instead
              of the &lt;code&gt;with&lt;/code&gt; clause as a whole (or the &lt;code&gt;Arguments&lt;/code&gt; element as had been the case
              before
              &lt;a href="https://github.com/KronicDeth/intellij-elixir/commit/6fcc19bd1748004756da2c8a541fa8b94ede1f71"&gt;
                6fcc19b
              &lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Resolves functions qualified by Aliases that are either direct Module references or one-step aliases.
            &lt;/li&gt;
            &lt;li&gt;
              Remove &lt;code&gt;Call#resolvedFunctionName&lt;/code&gt;  because &lt;code&gt;import&lt;/code&gt; can't rename functions.
            &lt;/li&gt;
            &lt;li&gt;
              Don't type-highlight &lt;code&gt;BracketOperation&lt;/code&gt;s as they occur when putting maps or structs in front of
              lists.
            &lt;/li&gt;
            &lt;li&gt;
              Treat &lt;code&gt;Enum.each&lt;/code&gt; the same as &lt;code&gt;Enum.map&lt;/code&gt; around &lt;code&gt;def&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Increase &lt;code&gt;resolvedFinalArity&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt; for piping.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Go To Declaration resolves through &lt;code&gt;import&lt;/code&gt;&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;p&gt;for &lt;code&gt;import MyModule&lt;/code&gt;&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;the &lt;code&gt;import&lt;/code&gt; statement&lt;/li&gt;
                    &lt;li&gt;the call definition clause in the imported Module.&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;for &lt;code&gt;import MyModule, only: [name: arity]&lt;/code&gt;&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;the &lt;code&gt;import&lt;/code&gt; statement&lt;/li&gt;
                    &lt;li&gt;the call definition clause in the imported Module.&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;
                    for &lt;code&gt;import MyModule, except: [name: arity]&lt;/code&gt; &lt;em&gt;if&lt;/em&gt; reference is &lt;em&gt;not&lt;/em&gt;
                    &lt;code&gt;name/arity&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;the &lt;code&gt;import&lt;/code&gt; statement&lt;/li&gt;
                    &lt;li&gt;the call definition clause in the imported Module&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v4.5.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Go To Declaration for functions and macros (only those defined in parseable-Elixir source.  References
              to Erlang functions or only those available in &lt;code&gt;.beam&lt;/code&gt; file, such as the standard library will
              not resolve.)
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                Completion for functions and macros (only those defined in parseable-Elixir source.  Erlang functions
                and Elixir function only in compiled &lt;code&gt;.beam&lt;/code&gt; file, such as the standard library will not
                complete.)
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  Completion uses the same presentation as Structure View, so the you can tell whether the name is a
                  function/macro, whether it is public/private, and the Module where it is defined.
                &lt;/li&gt;
                &lt;li&gt;
                  Completed functions/macro insert &lt;code&gt;()&lt;/code&gt; after the name in preparation for Elixir 1.4 where it
                  is an error to have bare function calls.  It also makes it more obvious that you inserted a function
                  and not a variable.
                &lt;/li&gt;
                &lt;li&gt;
                  Completion works for all functions when a bare identifier is used.  For a qualified identifier, only
                  functions/macros under than Module are shown.
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v4.4.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Regression test using &lt;code&gt;typespec_test.exs&lt;/code&gt; that triggered
              &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/413"&gt;#413&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test that checks the correct &lt;code&gt;import&lt;/code&gt; is used for
              &lt;code&gt;GeneratedParserUtilBase&lt;/code&gt; in &lt;code&gt;ElixirParser&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;a href="https://www.youtube.com/watch?v=aOiJHZuudzg"&gt;Completion of multiple aliases inside curly braces&lt;/a&gt;
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  Override &lt;code&gt;ElixirMultipleAliases#processDeclarations&lt;/code&gt;, so that &lt;code&gt;treeWalkUp&lt;/code&gt; can
                  stop at &lt;code&gt;ElixirMultipleAliases&lt;/code&gt; when determining how to do Alias completion.  If a multiple
                  alias is encountered, then de-prefixed names should be returned.
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/429"&gt;#429&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/422"&gt;#422&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/438"&gt;#438&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/431"&gt;#431&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Regression test for &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/436"&gt;#436&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Return empty &lt;code&gt;Set&lt;/code&gt; instead of &lt;code&gt;null&lt;/code&gt; from &lt;code&gt;canonicalNameSet&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Highlight types in &lt;code&gt;ElixirMapUpdateArguments&lt;/code&gt; even though they are an
              &lt;a href="https://github.com/elixir-lang/elixir/blob/dadf98fbff2966f24bf5b0313822a90b90f7016a/lib/elixir/test/elixir/kernel/typespec_test.exs#L314-L320"&gt;
                invalid typespec example from elixir-lang/elixir tests
              &lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Check if &lt;code&gt;rightOperand&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; when highlighting types for &lt;code&gt;Type&lt;/code&gt;,
              which can occur when typing &lt;code&gt;:&lt;/code&gt; for an atom after the &lt;code&gt;::&lt;/code&gt; for a &lt;code&gt;Type&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Use &lt;code&gt;GeneratedParserUtilBase&lt;/code&gt; synced to GrammarKit version as was done originally in
              &lt;a href="https://github.com/KronicDeth/intellij-elixir/pull/406"&gt;#406&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Check parent of &lt;code&gt;BracketArguments&lt;/code&gt; for &lt;code&gt;isParameter&lt;/code&gt; and &lt;code&gt;isVariable&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Instead of asserting that a &lt;code&gt;QualifiableAlias&lt;/code&gt; has 3 children, which may not be true on error
              recovery, use the &lt;code&gt;Normalized&lt;/code&gt; static methods that are used elsewhere to handle error recovery
              around Infix operations as the &lt;code&gt;.&lt;/code&gt; in &lt;code&gt;QualifiableAlias&lt;/code&gt;es is a pseudo-Infix.
            &lt;/li&gt;
            &lt;li&gt;
              Add missing &lt;code&gt;@Nullable&lt;/code&gt; to &lt;code&gt;@NotNull&lt;/code&gt; change when parser wasn't regenerated when
              &lt;code&gt;canonicalNameSet&lt;/code&gt; was changed to &lt;code&gt;@NotNull&lt;/code&gt; in the interface.
            &lt;/li&gt;
            &lt;li&gt;
              Search above block items and block lists for calls to check use scope
            &lt;/li&gt;
            &lt;li&gt;
              Check parent &lt;code&gt;isVariable&lt;/code&gt; for &lt;code&gt;ElixirNoParenthesesManyStrictNoParenthesesExpression&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Highlight &lt;code&gt;@type&lt;/code&gt; without &lt;code&gt;::&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;ElixirNoParenthesesManyStrictNoParenthesesExpression&lt;/code&gt; indicates an ambiguous no parentheses
              nesting, but the highlighting should not error and do a best effort instead.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;isParameter(Call)&lt;/code&gt; called &lt;code&gt;isParameter&lt;/code&gt; on its parent if it wasn't a call
              definition clause, delegation or macro, but &lt;code&gt;isParameter(PsiElement)&lt;/code&gt; immediately calls
              &lt;code&gt;getParent()&lt;/code&gt; and does all the &lt;code&gt;instanceof&lt;/code&gt; tests on the parent.  So, instead of
              &lt;code&gt;isParameter(Call)&lt;/code&gt; calling &lt;code&gt;isParameter(PsiElement)&lt;/code&gt; on its parent, it should just
              call it on itself, this way the check for &lt;code&gt;ElixirInterpolation&lt;/code&gt; will not be skipped and there's
              no need to handle &lt;code&gt;ElixirInterpolatedString&lt;/code&gt;.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v4.3.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;
                Resolve aliased modules to their &lt;code&gt;alias&lt;/code&gt; call, from the alias call, you can Go To Declaration
                for the module itself.
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;p&gt;Code structure&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;
                      Module resolution uses the OpenAPI convention of &lt;code&gt;treeWalkUp&lt;/code&gt; now instead of custom
                      code.
                    &lt;/li&gt;
                    &lt;li&gt;Resolvable names has been extracted to its own class&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;Resolution use cases&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;code&gt;Suffix&lt;/code&gt; resolves to &lt;code&gt;alias Prefix.Suffix&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Suffix.Nested&lt;/code&gt; resolves to &lt;code&gt;alias Prefix.Suffix&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;As&lt;/code&gt; resolves to &lt;code&gt;alias Prefix.Suffix, as: As&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;NestedSuffix&lt;/code&gt; resolves to &lt;code&gt;alias __MODULE__.NestedSuffix&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Completion for module aliases&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;From in-file aliases&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;__MODULE__&lt;/code&gt;
                &lt;li&gt;In project modules (using index already used for Go To Declaration)&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              In addition to &lt;code&gt;StubBased#canonicalName&lt;/code&gt;, there now also &lt;code&gt;StubBased#canonicalNames&lt;/code&gt;,
              for when a call defines multiple canonical names, as is the case for
              &lt;code&gt;defimpl &amp;lt;PROTOCOL&amp;gt;, for: [&amp;lt;TYPE&amp;gt;, ...]&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              When a aliased name is added to the module list for completion, it's unaliased name is searched for in the
              &lt;code&gt;AllName&lt;/code&gt; index, if any nested modules are found for the unaliased name, then those nested
              names are aliased and also shown for completion.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;resolvableName&lt;/code&gt; allows nested modules under multiple aliases to be completed
            &lt;/li&gt;
            &lt;li&gt;
              By user request, the folding will be off-by-default now, but can be re-enabled, like the old behavior by
              checking the checkbox in Preferences &amp;gt; Editor &amp;gt; General &amp;gt; Code Folding &amp;gt;
              Elixir Module directive (&lt;code&gt;alias&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; or
              &lt;code&gt;use&lt;/code&gt;) groups.
            &lt;/li&gt;
            &lt;li&gt;
              Resolve &lt;code&gt;as:&lt;/code&gt; aliased name to both &lt;code&gt;alias&lt;/code&gt; and &lt;code&gt;defmodule&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Complete modules nested under &lt;code&gt;as:&lt;/code&gt; aliased name.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Completion and reference tests for aliases:&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;code&gt;alias Prefix.Suffix&lt;/code&gt;.&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;alias Prefix.Suffix, as: As&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;alias Prefix.{MultipleAliasA, MultipleAliasB}&lt;/code&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;code&gt;defimpl &amp;lt;PROTOCOL&amp;gt;, for: [&amp;lt;TYPE&amp;gt;, ...]&lt;/code&gt; generates multiple canonical names,
                which are stored in the stub index.
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  When retrieved from the &lt;code&gt;AllName&lt;/code&gt; index, the &lt;code&gt;defimpl&lt;/code&gt;'s Implementation will
                  render as if only the &lt;code&gt;defimpl &amp;lt;PROTOCOL&amp;gt;, for: &amp;lt;TYPE&amp;gt;&lt;/code&gt; was used for the
                  &lt;code&gt;&amp;lt;TYPE&amp;gt;&lt;/code&gt; matching the lookup name in the Goto Symbol dialog.  For example, if you
                  search for &lt;code&gt;Tuple&lt;/code&gt;, &lt;code&gt;JSX.Encoder.Tuple&lt;/code&gt; will match for
                  &lt;a href="https://github.com/talentdeficit/exjsx/blob/master/lib/jsx.ex#L152-L155"&gt;
                    &lt;code&gt;defimpl JSX.Encoder, for: for: [Tuple, PID, Port, Reference, Function, Any]&lt;/code&gt;
                  &lt;/a&gt;.
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Look outside &lt;code&gt;Enum.map&lt;/code&gt; for enclosing macro call because &lt;code&gt;Ecto&lt;/code&gt; defines the clauses
              of &lt;code&gt;__schema__(:type, ...)&lt;/code&gt; using &lt;code&gt;Enum.map&lt;/code&gt;, but &lt;code&gt;enclosingMacroCall&lt;/code&gt;
              only knew to jump over enclosing macros like &lt;code&gt;for&lt;/code&gt;, so a special case was added for anonymous
              function given to &lt;code&gt;Enum.map&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Fix if-else-ordering bug where &lt;code&gt;Call&lt;/code&gt; appeared before operations (which are usually
              &lt;code&gt;Call&lt;/code&gt;s) like &lt;code&gt;Match&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              In &lt;code&gt;@type unquote({name, nil, []}) :: foo&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; will be highlighted as a type
              parameter even though it is not strictly the name that will appear as a type parameter.
            &lt;/li&gt;
            &lt;li&gt;
              Resolve alias nested under aliased modules to both the &lt;code&gt;alias&lt;/code&gt; and &lt;code&gt;defmodule&lt;/code&gt;, as
              resolving to only the &lt;code&gt;alias&lt;/code&gt; loses the nested name, so it wasn't possible to jump to the
              nested name's &lt;code&gt;defmodule&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Resolve aliased name to both the &lt;code&gt;alias&lt;/code&gt; and the &lt;code&gt;defmodule&lt;/code&gt;, so you can skip
              jumping to the &lt;code&gt;alias&lt;/code&gt; before jumping to the &lt;code&gt;defmodule&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              The generated &lt;code&gt;ElixirParser&lt;/code&gt; uses the &lt;code&gt;GeneratedParserUtilBase&lt;/code&gt; from &lt;code&gt;com.intellij.lang.parser&lt;/code&gt;, but since
              that version is a synced copy, it is a snapshot of &lt;code&gt;GeneratedParserUtilBase&lt;/code&gt; from the version of
              GrammarKit that was current when the IDE was released.  To ensure the generated parser works on all the
              IDEs, copy &lt;code&gt;GeneratedParserUtilBase&lt;/code&gt; from &lt;code&gt;org.intellij.grammar.parser&lt;/code&gt; into
              &lt;code&gt;org.elixir_lang.grammar.parser&lt;/code&gt; and then use that version in &lt;code&gt;ElixirParser&lt;/code&gt;.  This ensures neither the
              IDE's version nor the version in any installed GrammarKit plugin is used.
            &lt;/li&gt;
            &lt;li&gt;
              Check that index name maps to an actual project element before returning it for completion as the names
              from &lt;code&gt;StubIndex.getInstance.getAllKeys(...)&lt;/code&gt; is a superset of actual keys in the actual project
              &lt;a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/207930789-StubIndex-persisting-between-test-runs-leading-to-incorrect-completions"&gt;
                according to Peter Gromov of JetBrains
              &lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Don't index &lt;code&gt;canonicalName&lt;/code&gt; if it matches the literal name, as the duplicate name leads to
              duplicate entries in the completion lookup.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;canonicalNameCollection&lt;/code&gt; was renamed to &lt;code&gt;canonicalNameSet&lt;/code&gt; (with type changing from
              &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt; to &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt; to match) to emphasize that the
              canonical names should be unique, but &lt;code&gt;canonicalNameSet&lt;/code&gt; itself should still include duplicates
              of name for those places where only canonical names are used.
            &lt;/li&gt;
            &lt;li&gt;
              Use &lt;code&gt;resolvableName&lt;/code&gt; for the &lt;code&gt;unaliasedName&lt;/code&gt; for &lt;code&gt;MultipleAliases&lt;/code&gt;
              Aliases, so that they complete correctly for nested modules.
            &lt;/li&gt;
            &lt;li&gt;
              Completion for nested modules will no longer complete with string suffixes (i.e. &lt;code&gt;SSHView&lt;/code&gt;) and
              only complete nested Aliases (i.e. &lt;code&gt;SSH.Key&lt;/code&gt;).
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v4.2.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;code&gt;BraceMatcher&lt;/code&gt;
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;p&gt;Matches the following pairs:&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;code&gt;do&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;fn&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;"""&lt;/code&gt; to &lt;code&gt;"""&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt; &lt;code&gt;'''&lt;/code&gt; to &lt;code&gt;'''&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; to &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; to &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;[&lt;/code&gt; to &lt;code&gt;]&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;{&lt;/code&gt; to &lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;(&lt;/code&gt; to &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;Completes the following pairs:&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;code&gt;[&lt;/code&gt; with &lt;code&gt;]&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;{&lt;/code&gt; with &lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;(&lt;/code&gt; with &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;code&gt;QuoteHandler&lt;/code&gt; completes standard quotes (that start with &lt;code&gt;"&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt;)
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;code&gt;'&lt;/code&gt; with &lt;code&gt;'&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;"&lt;/code&gt; with &lt;code&gt;"&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;'''&lt;/code&gt; with &lt;code&gt;'''&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;"""&lt;/code&gt; with &lt;code&gt;"""&lt;/code&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;code&gt;TypedHandler&lt;/code&gt; completes the non-standard quotes and braces
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;code&gt;do&lt;/code&gt; with &lt;code&gt; end&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;fn&lt;/code&gt; with &lt;code&gt; end&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; with &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; with &lt;code&gt;&amp;gt;&lt;/code&gt;  (for promoters)&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;/&lt;/code&gt; with &lt;code&gt;/&lt;/code&gt;  (for promoters)&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;|&lt;/code&gt; with &lt;code&gt;|&lt;/code&gt; (for promoters)&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Check parent for &lt;code&gt;isVariable(ElixirMapUpdateArguments)&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              IntelliJ 15.0.4 is no longer available from JetBrains, so if the cache is not available, the builds don't
              work, so use 15.0.6, which is available in 15.0.4's place as the test version for 15.X.
            &lt;/li&gt;
            &lt;li&gt;
              IntelliJ 2016.2 is no longer available from JetBrains, so if the cache is not available, the builds don't
              work, so use 2016.2, which is available in 2016.1's places at the test version for 2016.X.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;enclosingMacroCall&lt;/code&gt; could climb out the stab after a &lt;code&gt;do&lt;/code&gt;, but not the
              &lt;code&gt;else&lt;/code&gt; in an &lt;code&gt;if&lt;/code&gt;, which is used for defined functions conditionally in
              &lt;a href="https://github.com/phoenixframework/phoenix/blob/v1.2.0/lib/phoenix/endpoint.ex#L542-L548"&gt;
                &lt;code&gt;Phoenix.Endpoint.server/0&lt;/code&gt;
              &lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              A lot of ppl use the doc template after already typing &lt;code&gt;@&lt;/code&gt;, but the doc template starts with
              &lt;code&gt;@&lt;/code&gt;, so it ends up inserting &lt;code&gt;@@doc ...&lt;/code&gt;. The &lt;code&gt;@doc&lt;/code&gt; template is the same
              code, but since the name starts with &lt;code&gt;@&lt;/code&gt;, it doesn't insert a second &lt;code&gt;@&lt;/code&gt;.
              Unfortunately, the template search code doesn't prompt when just typing &lt;code&gt;@&lt;/code&gt;, so you end up
              having to type &lt;code&gt;@doc&lt;/code&gt; before only one template is selected. The &lt;code&gt;@doc&lt;/code&gt; template
              will show in the lookup as soon as &lt;code&gt;@d&lt;/code&gt; is typed, but you have to select it from the list then
              before tabbing to accept.
            &lt;/li&gt;
            &lt;li&gt;
              Look at end of &lt;code&gt;do&lt;/code&gt; instead of start for &lt;code&gt;end&lt;/code&gt; completion to stop ignoring the
              &lt;code&gt;:&lt;/code&gt; in &lt;code&gt;do: &lt;/code&gt;, when &lt;code&gt;caret - 3&lt;/code&gt; would land on the &lt;code&gt;o&lt;/code&gt;, now all
              tests are meant to land on the &lt;code&gt;o&lt;/code&gt;, so &lt;code&gt;do: &lt;/code&gt; won't complete with &lt;code&gt;end&lt;/code&gt;
              incorrectly anymore.
            &lt;/li&gt;
            &lt;li&gt;
              Ignore &lt;code&gt;ElixirVariable&lt;/code&gt; in &lt;code&gt;highlightTypesAndTypeParameterUsages&lt;/code&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v4.1.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Allow &lt;code&gt;do end&lt;/code&gt; blocks to fold to &lt;code&gt;do: ...&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Allow &lt;code&gt;-&gt;&lt;/code&gt; operator and the right operand to fold to &lt;code&gt;-&gt; ...&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Allow &lt;code&gt;@doc&lt;/code&gt;, &lt;code&gt;@moduledoc&lt;/code&gt; and &lt;code&gt;@typedoc&lt;/code&gt; value to fold to
              &lt;code&gt;"..."&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Fold runs of adjacent &lt;code&gt;alias&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, or &lt;code&gt;use&lt;/code&gt;
              to be followed to a single &lt;code&gt;alias&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, or
              &lt;code&gt;use&lt;/code&gt; followed by &lt;code&gt;...&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Show a function separator
              (Preferences &amp;gt; Editor &amp;gt; General &amp;gt; Appearance &amp;gt; Show method separators) above the group of
              &lt;code&gt;@doc&lt;/code&gt;, &lt;code&gt;@spec&lt;/code&gt; and &lt;code&gt;def&lt;/code&gt;, &lt;code&gt;defp&lt;/code&gt;, &lt;code&gt;defmacro&lt;/code&gt;, and
              &lt;code&gt;defmacrop&lt;/code&gt; (call definition clauses) of the same name and arity range.  Arity range will be
              used if one of the call definition clauses uses default arguments.
            &lt;/li&gt;
            &lt;li&gt;&lt;code&gt;@for&lt;/code&gt; folds to the resolved module name in &lt;code&gt;defimpl&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;@protocol&lt;/code&gt; folds to the protocol name in &lt;code&gt;defimpl&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Share code between &lt;code&gt;mix&lt;/code&gt; and &lt;code&gt;elixir&lt;/code&gt; version parsing.&lt;/li&gt;
            &lt;li&gt;
              If no known modular (Module, Implementation, Protocol, Quote, or Use) matches the call, then use Unknown,
              which accepts any macro with a &lt;code&gt;do&lt;/code&gt; block or keyword.  This allows Go To Symbol to no error in
              projects using Dogma as &lt;code&gt;defrule&lt;/code&gt; is now treated as Unknown instead of causing an error that
              the enclosing modular could not be found.
            &lt;/li&gt;
            &lt;li&gt;
              Regenerate &lt;code&gt;gen&lt;/code&gt; folder using Grammar Kit 1.4.1 and fix some bugs (including
              &lt;a href="https://github.com/JetBrains/Grammar-Kit/issues/126"&gt;JetBrains/Grammar-Kit#126&lt;/a&gt;) manually.
            &lt;/li&gt;
            &lt;li&gt;
              Have both &lt;code&gt;QualifiedBracketOperation&lt;/code&gt; and &lt;code&gt;UnqualifiedBracketOperation&lt;/code&gt; extend
              &lt;code&gt;BracketOperation&lt;/code&gt;, so that &lt;code&gt;BracketOperation&lt;/code&gt; can be used to match both when the
              qualification does not matter.
            &lt;/li&gt;
            &lt;li&gt;Regenerate parser with GrammarKit 1.4.2&lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;ElixirSdkRelease&lt;/code&gt; is now &lt;code&gt;Comparable&lt;/code&gt;, so version checks can be done for tests to
              restrict them to Elixir 1.2+ for multiple alias support.
            &lt;/li&gt;
            &lt;li&gt;Resolve Multiple Aliases with unqualified Alias in tuples.&lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;code&gt;canonicalName&lt;/code&gt; borrows from the idea of &lt;code&gt;PsiReference#canonicalText&lt;/code&gt;: an element
                can have both a Name (from &lt;code&gt;getName&lt;/code&gt;), which is the literal name in the code, which can be
                renamed, and a Canonical Name, which is the name to refer to the element without need for imports or
                aliases.  For this change, &lt;code&gt;defimpl&lt;/code&gt;, &lt;code&gt;defmodule&lt;/code&gt;, and &lt;code&gt;defprotocol&lt;/code&gt;
                will show their full module Alias for their Canonical Name.
              &lt;/p&gt;
              &lt;p&gt;
                This change addresses the use case of Go To Declaration that should resolved to a nested
                &lt;code&gt;defmodule&lt;/code&gt;.
              &lt;/p&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Check if &lt;code&gt;parameter&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; before &lt;code&gt;Variable#execute&lt;/code&gt; call in
              &lt;code&gt;Variable#execute(PsiElement[], ResolveState)&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Fix &lt;code&gt;isVariable&lt;/code&gt; and &lt;code&gt;variableUseScope&lt;/code&gt; for &lt;code&gt;var!(name)[...]&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;@for&lt;/code&gt; is no longer marked as unresolved in &lt;code&gt;defimpl&lt;/code&gt; and instead resolve to the
              either the &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; in &lt;code&gt;for: &amp;lt;name&amp;gt;&lt;/code&gt; or the module name for the
              enclosing module when &lt;code&gt;for: &lt;/code&gt; is not given.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;@protocol&lt;/code&gt; is no longer marked as unresolved in &lt;code&gt;defimpl&lt;/code&gt; and instead resolve to
              the &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; in &lt;code&gt;defimpl &amp;lt;name&amp;gt;&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Instead of &lt;code&gt;assert checkRight || checkLeft&lt;/code&gt; in &lt;code&gt;Match#processDeclaraions&lt;/code&gt;, do the
              normal code if &lt;code&gt;checkRight || checkLeft&lt;/code&gt; and log an error report otherwise, so that the exact
              code that trigger this error can be reported and the method fixed to handle that form of
              &lt;code&gt;Match&lt;/code&gt; later.
            &lt;/li&gt;
            &lt;li&gt;
              Check all lines of output for mix version as Elixir 1.3.0 changed the format of
              &lt;code&gt;mix --version&lt;/code&gt;, so that it includes the Erlang header
              (&lt;code&gt;Erlang/OTP ... [erts-...] [source] [64-bit] [smp:..:..] [async-threads:..] [hipe] [kernel-poll:false] [dtrace]&lt;/code&gt;)
              on the first line and &lt;code&gt;Mix &amp;lt;version&amp;gt;&lt;/code&gt; on the 3rd line.  Previously the parsing expected
              &lt;code&gt;Mix &amp;lt;version&amp;gt;&lt;/code&gt; to be the first line.
            &lt;/li&gt;
            &lt;li&gt;
              If no known modular (Module, Implementation, Protocol, Quote, or Use) matches the call, then use Unknown,
              which accepts any macro with a &lt;code&gt;do&lt;/code&gt; block or keyword.  This allows Go To Symbol to no error in
              projects using Dogma as &lt;code&gt;defrule&lt;/code&gt; is now treated as Unknown instead of causing an error that
              the enclosing modular could not be found.
            &lt;/li&gt;
            &lt;li&gt;&lt;code&gt;BracketOperations&lt;/code&gt; are neither parameters nor variables.&lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Fix stacktrace linking picking wrong file with same basename&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  Strip spaces from front of file path in &lt;code&gt;mix&lt;/code&gt; output, which allows file looks to work
                  correctly.
                &lt;/li&gt;
                &lt;li&gt;
                  Ensure file reference highlight doesn't include the leading and trailing characters by fix off-by-one
                  errors.
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Determine whether to check left, right, or both by doing isAncestor checks for all operands, not just the
              normalized operand.  The normalized operand is still used for &lt;code&gt;PsiScopeProcessor#execute&lt;/code&gt; since
              &lt;code&gt;#execute&lt;/code&gt; is not expected to handle error elements.
            &lt;/li&gt;
            &lt;li&gt;
              Add &lt;code&gt;A.{B, C}&lt;/code&gt; to grammar with quoting to check consistence with Elixir 1.2.  Ports
              &lt;a href="https://github.com/elixir-lang/elixir/pull/3666"&gt;elixir-lang/elixir#3666&lt;/a&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Use &lt;code&gt;fullyQualifiedName&lt;/code&gt; instead of &lt;code&gt;getName&lt;/code&gt; for &lt;code&gt;resolvableName&lt;/code&gt;
              because &lt;code&gt;fullyQualifiedName&lt;/code&gt; is needed so that qualified aliases inside of the
              &lt;code&gt;{ }&lt;/code&gt; of a multiple alias will not have a name as &lt;code&gt;getName&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; for
              those qualified aliases because the name from &lt;code&gt;getName&lt;/code&gt; has to be a literal name that can be
              renamed and qualified names can't be renamed.
            &lt;/li&gt;
            &lt;li&gt;
              The &lt;code&gt;Module&lt;/code&gt; icon got the same icon as &lt;code&gt;Unknown&lt;/code&gt; when creating &lt;code&gt;Unknown&lt;/code&gt;
              somehow, I assume due to find-replace.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v4.0.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;Resolve and highlight parameter references&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Resolve call definition clause (&lt;code&gt;def(macro)?p?&lt;/code&gt;) parameters to themselves&lt;/li&gt;
                &lt;li&gt;Resolve call definition parameter with default to itself&lt;/li&gt;
                &lt;li&gt;Add Parameter ot Color Settings Page&lt;/li&gt;
                &lt;li&gt;Parameters in any macro with do block or keyword pair&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Resolve and highlight variable references&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Properly identifier variable declared in &lt;code&gt;for&lt;/code&gt; comprehension as variable&lt;/li&gt;
                &lt;li&gt;Add Variable to Color Settings Page&lt;/li&gt;
                &lt;li&gt;Highlight bind quoted keyword key as Variable&lt;/li&gt;
                &lt;li&gt;
                  Resolve references to earlier &lt;code&gt;&amp;&amp;&lt;/code&gt; operands, which handles code that matches a variable and
                  only uses the variable on success like
                  [&lt;code&gt;((cwd = cwd()) &amp;&amp; write_tmp_dir(cwd))&lt;/code&gt;](https://github.com/elixir-lang/elixir/blob/ccf6d14e3ec2eb96090222dad6f395b5b9ab72ac/lib/elixir/lib/system.ex#L268)
                &lt;/li&gt;
                &lt;li&gt;Resolve variables from &lt;code&gt;destructure&lt;/code&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Detect bitstring segment options and don't treat them as variables.&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  Highlight bitstring segment type options as Type, the same highlight as used for &lt;code&gt;@type&lt;/code&gt;
                  names.
                &lt;/li&gt;
                &lt;li&gt;Don't generate (unresolved) references for bitstring segment options&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                Resolve &lt;code&gt;_&lt;/code&gt; to only itself, no matter how many are used to reflect that it is non-binding,
                while &lt;code&gt;_&amp;lt;name&amp;gt;&lt;/code&gt;  will resolve to &lt;code&gt;_&amp;lt;name&amp;gt;&lt;/code&gt; as it does bind.
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Add Ignored Variable to Color Settings Page&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Reimplement module attribute renaming so that variable renaming can be implemented using a different
              validator for renaming (since module attribute names include the &lt;code&gt;@&lt;/code&gt;).  Non-inplace renaming
              should also be supported, but inplace is preferred.  (There's a setting to turn off in-place renaming in
              JetBrains IDEs.)
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;code&gt;operation.infix.Normalized&lt;/code&gt;
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  Normalizes leftOperand, operator, and rightOperand for an Infix operation that may have errors (in
                  either operand).  If there is an error in the operand then its normalized value is &lt;code&gt;null&lt;/code&gt;.
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Keyword key type descriptions&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Default to &lt;code&gt;"keyword key"&lt;/code&gt;. &lt;/li&gt;
                &lt;li&gt;Detect &lt;code&gt;bind_quoted:&lt;/code&gt; usage and call those &lt;code&gt;"quote bound variable"&lt;/code&gt;.&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                Add interfaces to unify matching of &lt;code&gt;Matched&lt;/code&gt; and &lt;code&gt;Unmatched&lt;/code&gt; form of operations
                when the code cares about the operator
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;code&gt;And&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;UnaryNonNumericOperation&lt;/code&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                Add &lt;code&gt;processDeclarations&lt;/code&gt; to support variable and parameter resolution using
                &lt;code&gt;PsiTreeUtil.treeWalkUp&lt;/code&gt; and &lt;code&gt;PsiScopeProcessors&lt;/code&gt;
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;code&gt;ElixirStabBody&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;StabOperations&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;Treat variables and parameters as &lt;code&gt;NamedElements&lt;/code&gt;, so they can be Rename Refactored.&lt;/li&gt;
            &lt;li&gt;
              Move reused Module and Function names to &lt;code&gt;org.elixir_lang.psi.name.{Module,Function}&lt;/code&gt;
              constants.
            &lt;/li&gt;
            &lt;li&gt;Parameter and Variable completion&lt;/li&gt;
            &lt;li&gt;
              Highlight keyword keys (&lt;code&gt;key:&lt;/code&gt; in &lt;code&gt;key: value&lt;/code&gt;) that aren't quotes
              (&lt;code&gt;"key": value&lt;/code&gt; or &lt;code&gt;'key': value&lt;/code&gt;) as Atom.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Show annotator applied highlights in the Preferences &gt; Editor &gt; Colors &amp; Fonts &gt; Elixir.&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Errors&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Alias&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;&lt;code&gt;Braces and Operators&lt;/code&gt;&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;code&gt;Bit&lt;/code&gt; (&lt;code&gt;&lt;&lt;&lt;/code&gt; and &lt;code&gt;&gt;&gt;&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Braces&lt;/code&gt; (&lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Brackets&lt;/code&gt; (&lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Char Tokens&lt;/code&gt; (&lt;code&gt;?&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Comma&lt;/code&gt; (&lt;code&gt;,&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Dot&lt;/code&gt; (&lt;code&gt;.&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Interpolation&lt;/code&gt; (&lt;code&gt;#{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;
                      &lt;p&gt;&lt;code&gt;Maps and Structs&lt;/code&gt;&lt;p&gt;
                      &lt;ul&gt;
                        &lt;li&gt;&lt;code&gt;Maps&lt;/code&gt; (&lt;code&gt;%{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;)&lt;/li&gt;
                        &lt;li&gt;
                          &lt;code&gt;Structs&lt;/code&gt; (&lt;code&gt;%{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; when used for struct.  The Alias is
                          still highlighted using &lt;code&gt;Alias&lt;/code&gt;)
                        &lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Operation Sign&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Parentheses&lt;/code&gt; (&lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Semicolon&lt;/code&gt; (&lt;code&gt;;&lt;/code&gt;)&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;&lt;code&gt;Calls&lt;/code&gt;&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;code&gt;Function&lt;/code&gt; (currently only combined with &lt;code&gt;Predefined&lt;/code&gt; to highlight
                      &lt;code&gt;Kernel&lt;/code&gt; functions.  Will be used later for all function calls once function references
                      are implemented.)
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;code&gt;Macro&lt;/code&gt; (curently only combined with &lt;code&gt;Predefined&lt;/code&gt; to highlight
                      &lt;code&gt;Kernel&lt;/code&gt; and &lt;code&gt;Kernel.SpecialForms&lt;/code&gt; macros. Will be used later for all macro
                      calls once macro references are implemented.)
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;code&gt;Predefined&lt;/code&gt; (Combined with &lt;code&gt;Function&lt;/code&gt; to highlight &lt;code&gt;Kernel&lt;/code&gt;
                      functions.  Combined with &lt;code&gt;Macro&lt;/code&gt; to highlight &lt;code&gt;Kernel&lt;/code&gt; and
                      &lt;code&gt;Kernel.SpecialForms&lt;/code&gt; macros.)
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Escape Sequence&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;&lt;code&gt;Module Attributes&lt;/code&gt;&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;p&gt;&lt;code&gt;Documentation&lt;/code&gt; (Previously &lt;code&gt;Documentation Module Attributes&lt;/code&gt;)&lt;/p&gt;
                      &lt;ul&gt;
                        &lt;li&gt;&lt;code&gt;Text&lt;/code&gt; (Previously &lt;code&gt;Documentation Text&lt;/code&gt;)&lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;p&gt;&lt;code&gt;Types&lt;/code&gt;&lt;/p&gt;
                      &lt;ul&gt;
                        &lt;li&gt;
                          &lt;code&gt;Callback&lt;/code&gt; (&lt;code&gt;my_callback&lt;/code&gt; in &lt;code&gt;@callback my_callback() :: :ok&lt;/code&gt;
                          or &lt;code&gt;my_macro_callback&lt;/code&gt; in &lt;code&gt;@macrocallback my_macro_callback&lt;/code&gt;)
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;code&gt;Specification&lt;/code&gt; (&lt;code&gt;my_function&lt;/code&gt; in
                          &lt;code&gt;@spec my_function() :: :ok&lt;/code&gt;)
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;p&gt;&lt;code&gt;Type&lt;/code&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;typ&lt;/code&gt; and &lt;code&gt;integer&lt;/code&gt; in  &lt;code&gt;@type typ :: integer&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;
                              &lt;code&gt;parameterized&lt;/code&gt; in
                              &lt;code&gt;@type parameterized(type_parameter) :: type_parameter&lt;/code&gt;
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;typtyp&lt;/code&gt; in &lt;code&gt;@opaque typtyp :: 1..10&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;
                              &lt;code&gt;typ&lt;/code&gt; and &lt;code&gt;typtyp&lt;/code&gt; in
                              &lt;code&gt;@callback func(typ, typtyp) :: :ok | :fail&lt;/code&gt;
                            &lt;/li&gt;
                            &lt;li&gt;
                              &lt;code&gt;binary&lt;/code&gt; and &lt;code&gt;utf8&lt;/code&gt; in
                              &lt;code&gt;&lt;&lt; "hello" :: binary, c :: utf8, x = 4 * 2 &gt;&gt; = "hello™1"&lt;/code&gt;
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;code&gt;Type Parameters&lt;/code&gt; (&lt;code&gt;type_parameter&lt;/code&gt; in
                      &lt;code&gt;@type parameterized(type_parameter) :: type_parameter&lt;/code&gt;)
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;&lt;code&gt;Numbers&lt;/code&gt;&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;code&gt;Binary, Decimal, Hexadecimal, and Octal Digits&lt;/code&gt; (Previously at top-level.)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Decimal Exponent, Mark and Separator&lt;/code&gt; (Previously at top-level)&lt;/li&gt;
                    &lt;li&gt;
                      &lt;code&gt;Invalid Binary, Decimal, Hexadecimal, and Octal Digits&lt;/code&gt; (Previously at top-level.)
                    &lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Non-Decimal Base Prefix&lt;/code&gt; (Previously at top-level.)&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Obsolete Non-Decimal Base Prefix&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;&lt;code&gt;Variables&lt;/code&gt;&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;code&gt;Ignored&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Parameter&lt;/code&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;code&gt;Variable&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Recover in expression until close of subexpression&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;\r\n&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;&gt;&gt;&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;]&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;-&gt;&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;end&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;after&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;catch&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;else&lt;/code&gt;&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;rescue&lt;/code&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Update Preferences &gt; Editor &gt; Colors &amp; Fonts &gt; Elixir example text's bitstring syntax to Elixir post-1.0.0
              (Use &lt;code&gt;-&lt;/code&gt; to separate segment options instead of a list.)
            &lt;/li&gt;
            &lt;li&gt;
              Use same algorithm for &lt;code&gt;ElixirStabBody&lt;/code&gt; and &lt;code&gt;ElixirFile&lt;/code&gt; because they are sequences
              of expressions.
            &lt;/li&gt;
            &lt;li&gt;
              Highlight atom keywords (&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt;, and &lt;code&gt;true&lt;/code&gt;) as merge of
              &lt;code&gt;Atom&lt;/code&gt; and &lt;code&gt;Keyword&lt;/code&gt; text attributes.  If both only use foreground color,
              &lt;code&gt;Keyword&lt;/code&gt; wins.
            &lt;/li&gt;
            &lt;li&gt;Annotate &lt;code&gt;QualifiableAlias&lt;/code&gt; as &lt;code&gt;Alias&lt;/code&gt;.&lt;/li&gt;
            &lt;li&gt;Highlight keyword list and map keywords (&lt;code&gt;&amp;lt;key&amp;gt;:&lt;/code&gt;) as &lt;code&gt;Atom&lt;/code&gt;.&lt;/li&gt;
            &lt;li&gt;Add &lt;code&gt;with&lt;/code&gt; to highlighted special forms&lt;/li&gt;
            &lt;li&gt;
              Default text attributes for "Darcula" and "Default" themes: almost every Text Attribute Key has a unique
              hue for the Foreground color.
            &lt;/li&gt;
            &lt;li&gt;
              Explain how to add &lt;code&gt;additionalTextAttributes&lt;/code&gt; to &lt;code&gt;plugin.xml&lt;/code&gt; in
              &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Group Textual Text Attribute Keys Together: Next "Textual" group is created and "Character List",
              "Escape Sequence", "Sigil", and "String" are moved under the group.
            &lt;/li&gt;
            &lt;li&gt;
              Describe relations between different text attributes in &lt;code&gt;COLOR_SCHEMA_DESIGN.xml&lt;/code&gt;, so they can
              be applied to different base schemes, such as applying the current Darcula additonalTextAttributes to
              Default.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Don't generate module attribute references for control attributes: Module attributes that control
              compilation or are predefined by the standard library: &lt;code&gt;@behaviour&lt;/code&gt;, &lt;code&gt;@callback&lt;/code&gt;,
              &lt;code&gt;@macrocallback&lt;/code&gt;, &lt;code&gt;@doc&lt;/code&gt;, &lt;code&gt;@moduledoc&lt;/code&gt;, &lt;code&gt;@typedoc&lt;/code&gt;,
              &lt;code&gt;@spec&lt;/code&gt;, &lt;code&gt;@opaque&lt;/code&gt;, &lt;code&gt;@type&lt;/code&gt;, and &lt;code&gt;@typep&lt;/code&gt;, should not have
              references because their uses are unrelated.
            &lt;/li&gt;
            &lt;li&gt;
              Drop requirement that there are 2 children and only require there be 1 and assume that is the Operator.
            &lt;/li&gt;
            &lt;li&gt;
              Don't count @(...) as a module attribute usage: Module attribute declarations are defined as
              &lt;code&gt;defmacro @(...)&lt;/code&gt; in Kernel and that &lt;code&gt;@&lt;/code&gt; should count as a function name, not a
              prefix for a module attribute name.
            &lt;/li&gt;
            &lt;li&gt;Allow &lt;code&gt;null&lt;/code&gt; Module for Scratch File use scope&lt;/li&gt;
            &lt;li&gt;Default to &lt;code&gt;"call"&lt;/code&gt; for Call type&lt;/li&gt;
            &lt;li&gt;Fix typo that had &lt;code&gt;*Two&lt;/code&gt; operations using &lt;code&gt;Type&lt;/code&gt; interface&lt;/li&gt;
            &lt;li&gt;Don't process &lt;code&gt;AccessExpression&lt;/code&gt; declarations&lt;/li&gt;
            &lt;li&gt;
              Highlight &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;@spec foo&lt;/code&gt; as a type, which occurs while typing a new
              &lt;code&gt;@spec&lt;/code&gt; before &lt;code&gt;::&lt;/code&gt; can be typed.
            &lt;/li&gt;
            &lt;li&gt;
              Check if &lt;code&gt;leftOperand&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; even when &lt;code&gt;checkLeft&lt;/code&gt; is
              &lt;code&gt;true&lt;/code&gt; because &lt;code&gt;checkLeft&lt;/code&gt; can be &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;leftOperand&lt;/code&gt; is
              &lt;code&gt;null&lt;/code&gt; when the &lt;code&gt;lastParent&lt;/code&gt; is the operand or operation as a whole, but there is an
              error in the unnormalized &lt;code&gt;leftOperand&lt;/code&gt; leading to the normalized &lt;code&gt;leftOperand&lt;/code&gt;
              being &lt;code&gt;null&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Check if reference is &lt;code&gt;null&lt;/code&gt; before checking if it resolves to &lt;code&gt;null&lt;/code&gt; when replacing
              module attribute usages with their value because &lt;code&gt;AtNonNumericOperation&lt;/code&gt;s can have a
              &lt;code&gt;null&lt;/code&gt; reference when they are non-referencing, like &lt;code&gt;@spec&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;Leave normal highlighting for char tokens when highlighting types&lt;/li&gt;
            &lt;li&gt;Stab operation parameter Use Scope is the stab operation.&lt;/li&gt;
            &lt;li&gt;
              Skip over &lt;code&gt;PsiLeafElement&lt;/code&gt; when looking for variables because the &lt;code&gt;PsiLeafElement&lt;/code&gt;
              is an error.
            &lt;/li&gt;
            &lt;li&gt;
              In a script file where the parent of a &lt;code&gt;Match&lt;/code&gt; is a &lt;code&gt;PsiFile&lt;/code&gt;, the
              &lt;code&gt;Match&lt;/code&gt; Use Scope is the rest of the file.
            &lt;/li&gt;
            &lt;li&gt;Add &lt;code&gt;=&lt;/code&gt; to &lt;code&gt;Operator Signs&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Skip &lt;code&gt;NoParenthesesKeywords&lt;/code&gt; when highlighting types, which occurs when the &lt;code&gt;::&lt;/code&gt; has
              no proper right operand and the following one-liner function clause with &lt;code&gt;do:&lt;/code&gt; is parsed as the
              right operand.
            &lt;/li&gt;
            &lt;li&gt;Skip &lt;code&gt;DUMMY_BLOCK&lt;/code&gt; when looking for Variable, which prevents walking through errors.&lt;/li&gt;
            &lt;li&gt;
              Use &lt;code&gt;Normalized&lt;/code&gt; pattern for &lt;code&gt;Prefix&lt;/code&gt;, so that the operand is &lt;code&gt;null&lt;/code&gt; when
              only the operator matches or the operand has errors.
            &lt;/li&gt;
            &lt;li&gt;
              Work-around Phoenix .ex templates that contain EEX: if &lt;code&gt;&lt;%=&lt;/code&gt; from EEX is detected, don't throw
              error when &lt;code&gt;Modular&lt;/code&gt; can't be found.
            &lt;/li&gt;
            &lt;li&gt;Fix capitalization error in example text&lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                In IntelliJ 14.1, all of &lt;code&gt;openapi.jar&lt;/code&gt; targets Java 1.6 (with &lt;code&gt;MAJOR.MINOR&lt;/code&gt;
                &lt;code&gt;50.0&lt;/code&gt;), but in IntelliJ 2016.1, some of &lt;code&gt;openapi.jar&lt;/code&gt; targets only Java 1.8
                (with &lt;code&gt;MAJOR.MINOR&lt;/code&gt; &lt;code&gt;52.0&lt;/code&gt;), since &lt;code&gt;jps-builders&lt;/code&gt; require parts of
                &lt;code&gt;openapi.jar&lt;/code&gt; and must target Java 1.6 even for IntelliJ 2016.1, the &lt;code&gt;52.0&lt;/code&gt;
                &lt;code&gt;.class&lt;/code&gt;es needed to be ported into &lt;code&gt;org.elixir_lang.jps.builder&lt;/code&gt;, so that the
                &lt;code&gt;52.0&lt;/code&gt; version in &lt;code&gt;openapi.jar&lt;/code&gt; wouldn't be attempted to be loaded.
              &lt;/p&gt;
              &lt;p&gt;
                This ended up being 5 classes:
                &lt;ul&gt;
                   &lt;li&gt;&lt;code&gt;ExecutionException&lt;/code&gt;&lt;/li&gt;
                   &lt;li&gt;&lt;code&gt;GeneralCommandLine&lt;/code&gt;&lt;/li&gt;
                   &lt;li&gt;&lt;code&gt;ParametersList&lt;/code&gt;&lt;/li&gt;
                   &lt;li&gt;&lt;code&gt;ParamsGroup&lt;/code&gt;&lt;/li&gt;
                   &lt;li&gt;&lt;code&gt;ProcessNotCreatedException&lt;/code&gt;&lt;/li&gt;
                &lt;/ul&gt;
                Only &lt;code&gt;GeneralCommandLine&lt;/code&gt; was used directly, all others are dependencies of it.
              &lt;/p&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Incompatible Changes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;
                Preferences &gt; Editor &gt; Colors &amp; Fonts &gt; Elixir restructured to group together related highlights and to
                match grouping used for Colors &amp; Fonts &gt; Language Defaults and Colors &amp; Fonts &gt; Java.
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;code&gt;Documentation Module Attributes&lt;/code&gt; renamed to
                  &lt;code&gt;Module Attributes&lt;/code&gt; &gt; &lt;code&gt;Documentation&lt;/code&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;Documentation Text&lt;/code&gt; renamed to &lt;code&gt;Module Attributes &gt; Documentation &gt; Text&lt;/code&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;Expression Substitution Mark&lt;/code&gt; renamed to
                  &lt;code&gt;Braces and Operators &gt; Interpolation&lt;/code&gt;.
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;Binary, Decimal, Hexadecimal, and Octal Digits&lt;/code&gt; was renamed to
                  &lt;code&gt;Numbers &gt; Digits &gt; Valid&lt;/code&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;Decimal Exponent, Mark and Separator&lt;/code&gt; was renamed to
                  &lt;code&gt;Number &gt; Digits &gt; Invalid&lt;/code&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;Numbers &gt; Non-Decimal Base Prefix&lt;/code&gt; renamed to
                  &lt;code&gt;Numbers &gt; Base Prefix &gt; Non-Decimal&lt;/code&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;Numbers &gt; Obsolete Non-Decimal Base&lt;/code&gt; renamed to
                  &lt;code&gt;Numbers &gt; Base Prefix &gt; Obsolete &gt; Non-Decimal&lt;/code&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;"Character List", "Escape Sequence", "Sigil", and "String" are moved under the new "Textual" group.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v3.0.1&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
               Use the error reporter logger instead of plain &lt;code&gt;assert&lt;/code&gt; in &lt;code&gt;Prefix#operator&lt;/code&gt;.
               &lt;strong&gt;
                 NOTE: This does not address error recovery recovery since I don't have a regression test case.
               &lt;/strong&gt;
            &lt;/li&gt;
            &lt;li&gt;
              All function name elements act as &lt;code&gt;PsiNameIdentifier&lt;/code&gt;s now even if they don't resolve, but that
              means they all need to support &lt;code&gt;FindUsagesProvider#getType&lt;/code&gt;, which they don't, so use a
              placeholder of "unknown call type" for any &lt;code&gt;Call&lt;/code&gt; that can't be matched and "unknown element"
              for anything else.
            &lt;/li&gt;
            &lt;li&gt;
              Enumerate all Kernel Functions, Macros, and Special Forms in the Syntax Highlighting section of the
              README, so that users searching for which category controls highlighting a given call can find it.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v3.0.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;Go To Symbol (&amp;#8997;&amp;#8984;O)&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  Call definition clauses (&lt;code&gt;def&lt;/code&gt;, &lt;code&gt;defp&lt;/code&gt;, &lt;code&gt;defmacro&lt;/code&gt;, and
                  &lt;code&gt;defmacrop&lt;/code&gt;)
                &lt;/li&gt;
                &lt;li&gt;Callbacks (&lt;code&gt;@callback&lt;/code&gt; and &lt;code&gt;@macrocallback&lt;/code&gt;)&lt;/li&gt;
                &lt;li&gt;Call definition specifications (&lt;code&gt;@spec&lt;/code&gt;)&lt;/li&gt;
                &lt;li&gt;
                  Call definition heads (&lt;code&gt;foo(bar)&lt;/code&gt;) for delegation
                  (&lt;code&gt;defdelegate foo(bar), to: BAZ&lt;/code&gt;)
                &lt;/li&gt;
                &lt;li&gt;Implementations (&lt;code&gt;defimpl&lt;/code&gt;)&lt;/li&gt;
                &lt;li&gt;Protocols (&lt;code&gt;defprotocol&lt;/code&gt;)&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Go To Declaration for Aliases now uses the same &lt;code&gt;isModular&lt;/code&gt; checks as the stubbing for the index uses for
              Go To Symbol.
            &lt;/li&gt;
            &lt;li&gt;Build against 14.0, 14.1, 15.0, and 2016.1 on travis-ci to ensure continued compatibility.&lt;/li&gt;
            &lt;li&gt;
              Error reporting for type highlighter gives the Class, Excerpt and Full Text when an unknown element type
              is encountered as the Excerpt alone is not enough sometimes.
            &lt;/li&gt;
            &lt;li&gt;
              Custom error handling that will open an issue against https://github.com/KronicDeth/intellij-elixir with
              the exception messsage and stacktrace filled in.
            &lt;/li&gt;
            &lt;li&gt;
              Changed &lt;code&gt;NotImplementedExceptions&lt;/code&gt; and (some) &lt;code&gt;assert&lt;/code&gt;s to logging custom error
              message that include the &lt;code&gt;PsiElement&lt;/code&gt; text and the containing file as an attachment.  The files
              make the URL too big for the error handler to put the file contents in when opening the browser with the
              error handler, so the issue body instead explains how to get the attachment text out of IntelliJ's
              "IDE Fatal Errors"
            &lt;/li&gt;
            &lt;li&gt;Update to Grammar Kit 1.3.0&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Fix Elixir Mix Run configuration not persisting past restart&lt;/li&gt;
            &lt;li&gt;
              Allow &lt;code&gt;Infix#operator&lt;/code&gt; to work on operations with errors, which eliminates the
              &lt;code&gt;AssertionError&lt;/code&gt; reported when typing infix operation and they are incomplete.
            &lt;/li&gt;
            &lt;li&gt;
              Add Keywords to the Preferences &amp;gt; Editor &amp;gt; Colors &amp; Fonts &amp;gt; Elixir settings page, so it can be
              customized for just Elixir instead of having to change Preferences &amp;gt; Editor &amp;gt; Colors &amp; Fonts &amp;gt;
              General &amp;gt; Keyword.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Use &lt;code&gt;TextAttributesKey&lt;/code&gt;s that aren't deprecated in 2016.1 and work back to 14.1&lt;/p&gt;
              &lt;p&gt;
                All of &lt;code&gt;CodeInsightColors&lt;/code&gt; is deprecated, so all constants from there had to be replaced.
                Unfortunately, the recommended replacements don't have the same color as the original, so I used
                different &lt;code&gt;DefaultLanguageHighlighterColors&lt;/code&gt; constants for some.
              &lt;/p&gt;
              &lt;p&gt;
                "Module Attribute" is now based on &lt;code&gt;DefaultLanguageHighlighterColors.CONSTANT&lt;/code&gt; (which is
                purplish in Darcula) instead of the recommended &lt;code&gt;METADATA&lt;/code&gt;, which is yellow.  Although module
                attributes don't have to be constant since they can be set to accumulate, often they are used as
                constants and not really as metadata, since they are just data then.  All the &lt;code&gt;metadata&lt;/code&gt; uses
                of module attributes have a separate color.
              &lt;/p&gt;
              &lt;p&gt;
                "Specification" is now based on &lt;code&gt;DefaultLanguageHighlighterColors.FUNCTION_DECLARATION&lt;/code&gt;,
                which maintains the golden color that &lt;code&gt;CodeInsightColors.METHOD_DECLARATION_ATTRIBUTES&lt;/code&gt; had.
              &lt;/p&gt;
              &lt;p&gt;
                "Type" is now based on &lt;code&gt;DefaultLanguageHighlighterColors.METADATA&lt;/code&gt;, which is bright yellow
                unlike &lt;code&gt;CodeInsightColors.ANNOTATION_ATTRIBUTE_NAME_ATTRIBUTES&lt;/code&gt;, which was a bright white.
              &lt;/p&gt;
              &lt;p&gt;
                "Type Parameter" is now based on &lt;code&gt;DefaultLanguageHighlighterColors.PARAMETER&lt;/code&gt;, which
                unfortunately has no attributes associated with it, but the constant name was too good a fit not to use,
                so if you want the old color, you'll need to customize it yourself.
              &lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Restore compatibility with the IntelliJ IDEA 14.0 release line&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  By using reflection to call &lt;code&gt;FileTemplateManager#getInstance&lt;/code&gt; if
                  &lt;code&gt;FileTemplateManager#getDefaultInstance&lt;/code&gt; is not available
                &lt;/li&gt;
                &lt;li&gt;
                  By calling &lt;code&gt;FileChooserDescriptorFactory#createSingleLocalFileDescriptor&lt;/code&gt; (which works in
                  14.0 through 2016.1) instead of &lt;code&gt;FileChooserDescriptorFactory#createSingleFileDescriptor&lt;/code&gt;
                  (which only works in 14.1 through 2016.1)
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Instead of showing the regular expression pattern, which may be confusing to new developers, explain in
              English the expected pattern. I also included the description, which explains how nesting is mapped to
              directories, of the action since it doesn't actually show up in the dialog otherwise.
            &lt;/li&gt;
            &lt;li&gt;
              Check if a file exists before allowing Elixir Module to be created. If it exists, show an error with the
              conflicting path.
            &lt;/li&gt;
            &lt;li&gt;
              Fix (one cause) of &lt;code&gt;AssertionError&lt;/code&gt; in &lt;code&gt;GoToSymbolContributor&lt;/code&gt; when the
              &lt;code&gt;Modular&lt;/code&gt; (&lt;code&gt;defimpl&lt;/code&gt;, &lt;code&gt;demodule&lt;/code&gt;, &lt;code&gt;defprotocol&lt;/code&gt;, and
              &lt;code&gt;quote&lt;/code&gt;) could not be resolved due a &lt;code&gt;def&lt;/code&gt; being surrounded by a &lt;code&gt;for&lt;/code&gt;
              comprehension, which is common in Elixir libraries as was the case for &lt;code&gt;Postgrex&lt;/code&gt;: any
              enclosing &lt;code&gt;for&lt;/code&gt; comprehension(s) will now be ignored and the next enclosing macro will be
              checked to see if it is a &lt;code&gt;Modular&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              While typing before &lt;code&gt;:&lt;/code&gt; in keyword pairs after the &lt;code&gt;when&lt;/code&gt;, such as in
              &lt;code&gt;@spec foo(id) :: id when id&lt;/code&gt; before finishing typing
              &lt;code&gt;@spec foo(id) :: id when id: String.t&lt;/code&gt;, the keyword key will be properly highlighted as a
              Type Parameter.
            &lt;/li&gt;
            &lt;li&gt;
              Properly handle the &lt;code&gt;Infix#rightOperand&lt;/code&gt; being &lt;code&gt;null&lt;/code&gt; due to the Pratt Parser
              matching up through the operator and then ignoring the mismatched right operand, which leads to the
              &lt;code&gt;Infix&lt;/code&gt; having only 2 elements: the left operand and the operator.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;code&gt;@doc&lt;/code&gt; and other module attributes appearing as the right operand of &lt;code&gt;@type name ::&lt;/code&gt;
              will be ignored as it is common when adding a new type above pre-existing, documented functions.
            &lt;/li&gt;
            &lt;li&gt;
              Only error in &lt;code&gt;Infix#leftOperand&lt;/code&gt; if there are not 2-3 children for &lt;code&gt;Infix&lt;/code&gt; instead
              of a strict 3.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Incompatible Changes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Drop support for IntelliJ 14.0 because the parser generated by Grammar Kit 1.3.0 is not compatible with
              the OpenAPI libraries shipped in IntelliJ 14.0.  Still compatible with 14.1 through 2016.1.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v2.2.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Code Commenter&lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Structure View&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;p&gt;Controls&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;Scroll to Source and Scroll From Source&lt;/li&gt;
                    &lt;li&gt;
                      &lt;p&gt;Sorting&lt;/p&gt;
                      &lt;ul&gt;
                        &lt;li&gt;Runtime (functions) vs Compile (macros)&lt;/li&gt;
                        &lt;li&gt;
                          Visibility (public [&lt;code&gt;def&lt;/code&gt;, &lt;code&gt;macro&lt;/code&gt;, etc] vs private
                          [&lt;code&gt;defp&lt;/code&gt;, &lt;code&gt;macrop&lt;/code&gt; and &lt;code&gt;@typep&lt;/code&gt;]
                        &lt;/li&gt;
                        &lt;li&gt;Alphabetical&lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      Show Used - injects structure from &lt;code&gt;use Alias&lt;/code&gt; call's &lt;code&gt;__using__&lt;/code&gt;'s
                      &lt;code&gt;quote&lt;/code&gt; into the call site Structure
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;Elements&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;Callbacks (&lt;code&gt;@callback&lt;/code&gt;) show their name/arity and then a nest spec&lt;/li&gt;
                    &lt;li&gt;CallDefinition groups together CallDefinitionClause of the same name/arity&lt;/li&gt;
                    &lt;li&gt;
                      CallDefinitionClause (&lt;code&gt;def&lt;/code&gt;, &lt;code&gt;defp&lt;/code&gt;, &lt;code&gt;macro&lt;/code&gt;, and
                      &lt;code&gt;macrop&lt;/code&gt;) shows the head of each definition under the CallDefinition.
                    &lt;/li&gt;
                    &lt;li&gt;
                      CallDefinitionSpecification (&lt;code&gt;@spec&lt;/code&gt;) show the type specification for a CallDefinition
                    &lt;/li&gt;
                    &lt;li&gt;
                      CallReference &lt;code&gt;name: arity&lt;/code&gt; shows the name/arity for a &lt;code&gt;defoverridable&lt;/code&gt;.
                    &lt;/li&gt;
                    &lt;li&gt;
                      Delegation shows all the &lt;code&gt;:append_first&lt;/code&gt; and &lt;code&gt;:to&lt;/code&gt; options with the implied
                      Function Delegation nested underneath
                    &lt;/li&gt;
                    &lt;li&gt;
                      Exception (&lt;code&gt;defexception&lt;/code&gt;) show the implicit struct and nest any callback functions,
                      such as &lt;code&gt;exception/1&lt;/code&gt; or &lt;code&gt;message/1&lt;/code&gt;.
                    &lt;/li&gt;
                    &lt;li&gt;
                      Overridable &lt;code&gt;defoverridable&lt;/code&gt; tracks overridable functions and is used to mark
                      CallDefinitions are overrides.
                    &lt;/li&gt;
                    &lt;li&gt;
                      Quote &lt;code&gt;quote do end&lt;/code&gt; models quote blocks so they can be injected &lt;code&gt;use Alias&lt;/code&gt;
                      sites.
                    &lt;/li&gt;
                    &lt;li&gt;Use &lt;code&gt;use Alias&lt;/code&gt; show &lt;code&gt;use&lt;/code&gt; calls.&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;Live Templates&lt;/li&gt;
            &lt;li&gt;
              Added clarification to "Import Project from External Model" that &lt;code&gt;mix.bat&lt;/code&gt; should be used
              instead of &lt;code&gt;mix&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
              Get the Elixir version directly from &lt;code&gt;System.build_info[:version]&lt;/code&gt; instead of processing the
              formatted output of &lt;code&gt;elixir --version&lt;/code&gt; as the build info version is more stable
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Elixir version parsing handles both pre and build numbers if present by using the same regular expression
              as Elixir itself uses for the &lt;code&gt;Version&lt;/code&gt; module
            &lt;/li&gt;
            &lt;li&gt;Better error handing in Structure View&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v2.1.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;code&gt;\u&lt;/code&gt; in strings and char lists for unicode mapping&lt;/li&gt;
            &lt;li&gt;Test against Elixir 1.1.1 and 1.2.0&lt;/li&gt;
            &lt;li&gt;
              More flexible &lt;code&gt;elixir --version&lt;/code&gt; parsing: works with &lt;code&gt;elixir&lt;/code&gt; 1.2.0 and earlier
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Update IntelliJ to 14.1.6 to fix 403 errors in Travis-CI build&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v2.0.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;Highlighters for&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Kernel Functions&lt;/li&gt;
                &lt;li&gt;Kernel Macros&lt;/li&gt;
                &lt;li&gt;Kernel.SpecialForms Macros&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;Test against Elixir v1.1.1&lt;/li&gt;
            &lt;li&gt;
              Highlight &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;end,
              &lt;/code&gt;fn&lt;code&gt;, and &lt;/code&gt;rescue` as keywords.
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Annotate Module Attributes&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  Documentation module attributes (&lt;code&gt;@doc&lt;/code&gt;, &lt;code&gt;@moduledoc&lt;/code&gt;, and
                  &lt;code&gt;@typedoc&lt;/code&gt;) are annotated as "Documentation Module Attributes" while all other module
                  attributes are annotated as "Module Attributes".
                &lt;/li&gt;
                &lt;li&gt;
                  The string or heredoc argument to a documentation module attribute (&lt;code&gt;@doc&lt;/code&gt;,
                  &lt;code&gt;@moduledoc&lt;/code&gt;, and &lt;code&gt;@typedoc&lt;/code&gt;) is annotated as "Documentation Text"
                &lt;/li&gt;
                &lt;li&gt;
                  Function names passed to &lt;code&gt;@callback&lt;/code&gt;, &lt;code&gt;@macrocallback&lt;/code&gt; or
                  &lt;code&gt;@spec&lt;/code&gt; are annotated as "Specification".
                &lt;/li&gt;
                &lt;li&gt;
                  Variables/calls in the parameters and return of &lt;code&gt;@callback&lt;/code&gt;, &lt;code&gt;@macrocallback&lt;/code&gt;,
                  &lt;code&gt;@spec&lt;/code&gt; are annotated as "Type".
                &lt;/li&gt;
                &lt;li&gt;
                  Parameters of &lt;code&gt;@opaque&lt;/code&gt;, &lt;code&gt;@type&lt;/code&gt;, &lt;code&gt;@typep&lt;/code&gt; names are annotated as
                  "Type Parameter"
                &lt;/li&gt;
                &lt;li&gt;
                  Keyword keys from the &lt;code&gt;when&lt;/code&gt; clause of &lt;code&gt;@callback&lt;/code&gt;, &lt;code&gt;@macrocallback&lt;/code&gt;
                  or &lt;code&gt;@spec&lt;/code&gt; definitions and their usage are annotated as "Type Parameters"
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;@doc false&lt;/code&gt;, &lt;code&gt;@moduledoc false&lt;/code&gt;, and &lt;code&gt;@typedoc false&lt;/code&gt; will annotate
                  the &lt;code&gt;false&lt;/code&gt; with a weak warning: "Will make documented invisible to the documentation
                  extraction tools like ExDoc.".
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;Module Attribute resolution and refactoring&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Go To Definition for module attributes.&lt;/li&gt;
                &lt;li&gt;Module attribute completion&lt;/li&gt;
                &lt;li&gt;
                  Module attributes that can't be resolved will have "Unresolved module attribute" error annotation
                  (i.e. red squiggly underline).
                &lt;/li&gt;
                &lt;li&gt;Find Usages of module attributes from their declarations.&lt;/li&gt;
                &lt;li&gt;
                  Rename module attributes inline (editing the name in the declaration will change the name at the usage
                  site at the same time without a dialog).
                &lt;/li&gt;
                &lt;li&gt;
                  The module attribute value (from the declaration site) will be folded into the usage site.  It can be
                  reverted to the literal &lt;code&gt;@module_name&lt;/code&gt; text by clicking the + to unfold.
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Change "edition" to "addition" in README.&lt;/li&gt;
            &lt;li&gt;
              Sped up reparsing when [ENTER] is hit in the middle of comment by removing the custom error handling
              element, adjacentExpression, and going with the default error handling provided by JetBrains' OpenAPI.
            &lt;/li&gt;
            &lt;li&gt;
              Fix &lt;code&gt;mix&lt;/code&gt; version detection on Windows.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Incompatible Changes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Removed "Add Newline" Quick Fix as it depended on &lt;code&gt;adjacentExpression&lt;/code&gt; elements, which have now
              been removed to speed up error handling when comments become code.
            &lt;/li&gt;
            &lt;li&gt;
              Removed "Add Semicolon" Quick Fix as it depended on &lt;code&gt;adjacentExpression&lt;/code&gt; elements, which have
              now been removed to speed up error handling when comments become code.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v1.2.1&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Keywords not at the end of no parentheses calls will be properly marked as errors.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Fix &lt;code&gt;IllegalStateException&lt;/code&gt; for file delete and rename by giving &lt;code&gt;ElixirFile&lt;/code&gt;s
              descriptive names for safe-refactoring displaying file usage.
            &lt;/li&gt;
            &lt;li&gt;
              README states explicitly that the plugin works with *both* IntelliJ Community and Ultimate.
            &lt;/li&gt;
            &lt;li&gt;
              README states that the plugin is free.
            &lt;/li&gt;
            &lt;li&gt;
              Prevent match error when typing &lt;code&gt;~&lt;/code&gt; to start a sigil that is followed later by a
              &lt;code&gt;\n&lt;/code&gt; by matching &lt;code&gt;EOL&lt;/code&gt; in the &lt;code&gt;NAMED_SIGIL&lt;/code&gt; state as a
              &lt;code&gt;BAD_CHARACTER&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
               Keywords at the end of a no parentheses call that is surrounded by parentheses will not be marked as an
               error when that parenthetical group appears in the middle of an outer call.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v1.2.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              If (1) you have intellij-erlang installed and (2) you have an atom in Erlang that starts with
              &lt;code&gt;Elixir.&lt;/code&gt;, such as &lt;code&gt;'Elixir.Test'&lt;/code&gt;, then intellij-elixir will annotate whether it
              can resolve the name to a &lt;code&gt;defmodule&lt;/code&gt; call in Elixir files.
            &lt;/li&gt;
            &lt;li&gt;
              Default SDK path for Linux and Windows.
            &lt;/li&gt;
            &lt;li&gt;
              Go To Declaration (&lt;code&gt;Cmd+Click&lt;/code&gt;, &lt;code&gt;Cmd+B&lt;/code&gt;, &lt;/code&gt;Navigate &gt; Declaration&lt;/code&gt;) from
              Alias to &lt;code&gt;defmodule&lt;/code&gt; where Alias is declared.
            &lt;/li&gt;
            &lt;li&gt;
              Index &lt;code&gt;defmodule&lt;/code&gt;s for fast Go To Declaration in
              &lt;a href="https://github.com/elixir-lang/elixir"&gt;
                &lt;code&gt;elixir-lang/elixir&lt;/code&gt;
              &lt;/a&gt;
              and other large projects.
            &lt;/li&gt;
            &lt;li&gt;
              Find Usage for Alias in &lt;code&gt;defmodule&lt;/code&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Fi links to screenshots in README&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v1.1.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;code&gt;Build&lt;/code&gt;
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;code&gt;Compile&lt;/code&gt; an individual file&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;Make Project&lt;/code&gt; to build the entire project&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;
                &lt;code&gt;New&lt;/code&gt;
              &lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;p&gt;
                    &lt;code&gt;Elixir File&lt;/code&gt; has new templates
                  &lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;code&gt;Empty module&lt;/code&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;code&gt;Elixir Application&lt;/code&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;code&gt;Elixir Supervisor&lt;/code&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;code&gt;Elixir GenServer&lt;/code&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;code&gt;Elixir GenEvent&lt;/code&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;Project &gt; Elixir&lt;/code&gt; creates a new Elixir project with an empty &lt;code&gt;lib&lt;/code&gt; directory
                  marked as source directory.
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;
                    &lt;code&gt;Project from Existing Sources... &lt;/code&gt;
                  &lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;
                       &lt;code&gt;Create project from existing sources&lt;/code&gt; sets up the project with SDK using a
                       pre-existing directory.
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;p&gt;
                        &lt;code&gt;Import project from external model &gt; Mix&lt;/code&gt;
                      &lt;/p&gt;
                      &lt;ul&gt;
                        &lt;li&gt;Fetches the the dependencies with the local version of &lt;code&gt;mix&lt;/code&gt;&lt;/li&gt;
                        &lt;li&gt;Marks &lt;code&gt;lib&lt;/code&gt; directory as source&lt;/li&gt;
                        &lt;li&gt;Marks &lt;code&gt;test&lt;/code&gt; directory as test sources&lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;code&gt;Run &gt; Elixir Mix&lt;/code&gt; to setup Run Configurations to run &lt;code&gt;mix&lt;/code&gt; tasks.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v1.0.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Update ant build on travis-ci.org to use IDEA 14.1.4 (from 14.0.2)&lt;/li&gt;
            &lt;li&gt;Parser is verified to quote the same as native Elixir&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Fix parsing of unary vs binary +/- with leading and trailing spaces and newlines&lt;/li&gt;
            &lt;li&gt;Allow EOL between list arguments and &lt;code&gt;]&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Relative identifiers after &lt;code&gt;.&lt;/code&gt; that start with &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and
              &lt;code&gt;not&lt;/code&gt; will be lexed as a single identifier instead of &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, or
              &lt;code&gt;not&lt;/code&gt; followed by another identifier.
            &lt;/li&gt;
            &lt;li&gt;&lt;code&gt;end&lt;/code&gt; is allowed as a relative identifier after &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;Fix &lt;code&gt;(...)&lt;/code&gt; as part of matched expression in no parentheses stab signature&lt;/li&gt;
            &lt;li&gt;Allow multiple newlines to mark the end of an expression, but only one &lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Allow operators in function references (&lt;code&gt;&amp;lt;op&amp;gt;/&amp;lt;arity&amp;gt;&lt;/code&gt;) for function captures
              (&lt;code&gt;&amp;amp;&amp;lt;op&amp;gt;/&amp;lt;arity&amp;gt;&lt;/code&gt;)
            &lt;/li&gt;
            &lt;li&gt;&lt;code&gt;unquote_splicing&lt;/code&gt; is properly wrapped in &lt;code&gt;__block__&lt;/code&gt; when in stab bodies&lt;/li&gt;
            &lt;li&gt;Check for matching terminator in heredocs when determining white space type at beginning of line&lt;/li&gt;
            &lt;li&gt;Allow &amp;lt;space&amp;gt;+&amp;lt;EOL&amp;gt; to count as addition&lt;/li&gt;
            &lt;li&gt;Unary expressions inside parentheses are no longer marked &lt;code&gt;ambiguous_op: nil&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;
              Differentiate between &lt;code&gt;Qualifier.'relative'()&lt;/code&gt; vs &lt;code&gt;Qualifier.'relative' ()&lt;/code&gt; and
              &lt;code&gt;Qualifier."relative"()&lt;/code&gt; vs &lt;code&gt;Qualifier."relative" ()&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;Fix link to Elixir website in README&lt;/li&gt;
            &lt;li&gt;All tokens have human-readable names and/or expected characters for better error messages&lt;/li&gt;
          &lt;/ul&gt;
          &lt;p&gt;Incompatible Changes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              New Elixir File has moved to the last item in the New File menu to preserve &lt;code&gt;CTRL+N ENTER&lt;/code&gt;
              keyboard shortcut for &lt;code&gt;New &amp;gt; File&lt;/code&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;0.3.5&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;code&gt;do&lt;/code&gt; blocks (&lt;code&gt;do end&lt;/code&gt;)&lt;/li&gt;
            &lt;li&gt;Unmatched expressions (operations involving &lt;code&gt;do&lt;/code&gt; block calls and normal matched expressions)&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Lex full atom instead of just identifier-like operator prefix (&lt;code&gt;:in&amp;lt;nospace&amp;gt;dex&lt;/code&gt; before vs &lt;code&gt;:index&lt;/code&gt; after)&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;!&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; are properly wrapped in &lt;code&gt;__block__&lt;/code&gt;s when in stab bodies&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v0.3.4&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Bracket at expression (&lt;code&gt;@foo[key]&lt;/code&gt;)&lt;/li&gt;
            &lt;li&gt;Anonymous functions (&lt;code&gt;fn end&lt;/code&gt;), stab clauses (&lt;code&gt;-&amp;gt;&lt;/code&gt;), and parentheticals (&lt;code&gt;1 + 2&lt;/code&gt;)&lt;/li&gt;
            &lt;li&gt;Maps (&lt;code&gt;%{}&lt;/code&gt;) and structs (&lt;code&gt;%User{}&lt;/code&gt;)&lt;/li&gt;
            &lt;li&gt;Tuples (&lt;code&gt;{}&lt;/code&gt;)&lt;/li&gt;
            &lt;li&gt;Bit Strings (&lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;)&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v0.3.3&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;Remote function calls (&lt;code&gt;Alias.function&lt;/code&gt;, &lt;code&gt;:atom.function&lt;/code&gt;, etc) and local function calls (&lt;code&gt;function&lt;/code&gt;) with...&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;p&gt;No Parentheses with...&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;No Arguments (&lt;code&gt;Alias.function&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;Keywords (&lt;code&gt;Alias.function key: value&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;
                      Nested No Parentheses Call (&lt;code&gt;Alias.function Inner.function positional, key: value&lt;/code&gt;)
                    &lt;/li&gt;
                    &lt;li&gt;Positional and Keyword arguments (&lt;code&gt;Alias.function positional, key: value&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;Matched Expression (&lt;code&gt;Alias.function 1 + 2&lt;/code&gt;)&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;Parentheses with...&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;No arguments (&lt;code&gt;Alias.function()&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;No Parentheses Call (&lt;code&gt;Alias.function(Inner.function positional, key: value&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;Keywords (&lt;code&gt;Alias.function(key: value)&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;Positional and Keyword arguments (&lt;code&gt;Alias.function(positional, key: value)&lt;/code&gt;)&lt;/li&gt;
                    &lt;li&gt;Trailing parentheses for quoting (&lt;code&gt;def unquote(variable)(positional)&lt;/code&gt;)&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;Bracket expressions (&lt;code&gt;foo[key]&lt;/code&gt;)&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v0.3.2&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Fix
              &lt;code&gt;
                NoSuchElementException
              &lt;/code&gt;
              when no suggested SDK home paths are available.  Thanks to
              &lt;a href="https://github.com/zyuyou"&gt;
                zyuyou
              &lt;/a&gt;
              for
              &lt;a href="https://github.com/KronicDeth/intellij-elixir/issues/120"&gt;
              reporting
              &lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v0.3.1&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              File &amp;gt; New &amp;gt; Project From Existing Sources can be used in IntelliJ to setup the excludes, sources, tests,
              SDK and libraries for an Elixir project that has already been created with &lt;code&gt;mix new&lt;/code&gt;.
            &lt;/li&gt;
            &lt;li&gt;
              Operators can be qualified function names.
            &lt;/li&gt;
            &lt;li&gt;
              Anonymous function calls (&lt;code&gt;.(...)&lt;/code&gt;)
            &lt;/li&gt;
            &lt;li&gt;
              Inspection that marks errors when keywords aren't at end of list.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v0.3.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;code&gt;\x&lt;/code&gt; is marked an error in CharLists, CharList Heredocs, Strings, and String Heredocs, but not
              in any sigils.
            &lt;/li&gt;
            &lt;li&gt;
              New Elixir File will automatically underscore the camel case module name when creating the file name and
              will convert qualifying aliases before the last &lt;code&gt;.&lt;/code&gt; to directories.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Incompatible Changes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              New Elixir File validates that the name is a valid Alias, so each &lt;code&gt;.&lt;/code&gt; separated part must start with a
              capital letter.  Previous New Elixir File validated that the name was a valid path, and so forced the name
              to be lowercase.
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v0.2.1&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              No parentheses function calls can occur as the right operand in binary infix operations or the sole
              operand of unary prefix operation.
            &lt;/li&gt;
            &lt;li&gt;
              Function calls with neither parentheses nor &lt;code&gt;do&lt;/code&gt; blocks that have at least 2 arguments: a
              positional argument and keyword arguments or 2 or more positional argument(s) followed by optional keyword
              arguments.
            &lt;/li&gt;
            &lt;li&gt;Inspection that marks errors for ambiguous commas&lt;/li&gt;
            &lt;li&gt;Inspection that marks errors for ambiguous parentheses&lt;/li&gt;
            &lt;li&gt;Quick Fix for the ambiguous parentheses to remove the space between the function name and the opening parentheses.&lt;/li&gt;
            &lt;li&gt;Inspection that marks errors for missing end-of-expressions (&lt;code&gt;;&lt;/code&gt; and newlines) between expressions.&lt;/li&gt;
            &lt;li&gt;Quick Fix to insert &lt;code&gt;;&lt;/code&gt; for missing end-of-expression.&lt;/li&gt;
            &lt;li&gt;Quick Fix to insert newline for missing end-of-expression.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Right hand-side of dot_alias and dot_identifier was translated incorrectly. Only Aliases and Identifiers are allowed now.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v0.2.0&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;p&gt;New attributes for parts of numbers on Color Settings Page&lt;/p&gt;
              &lt;ul&gt;
                &lt;li&gt;Binary, Decimal, Hexadecimal, and Octal Digits&lt;/li&gt;
                &lt;li&gt;Decimal Exponent, Mark, and Separator&lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;Invalid Binary, Decimal, Hexadecimal, and Octal Digits&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;2-9, A-Z, and a-z will be parsed as invalid binary digits&lt;/li&gt;
                    &lt;li&gt;8-9, A-Z, and a-z will be parsed as invalid octal digits&lt;/li&gt;
                    &lt;li&gt;G-Z and g-z will be parsed as invalid hexadecimal digits&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;p&gt;Non-Decimal Base Prefix&lt;/p&gt;
                  &lt;ul&gt;
                    &lt;li&gt;Any letter other than b, o, or x, in either case, will be recognized as an invalid whole number base&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;Obsolete Non-Decimal Base Prefix (&lt;code&gt;B&lt;/code&gt; for binary and &lt;code&gt;X&lt;/code&gt; for hexadecimal)&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;Any digit, 0-9, A-Z, or a-z will be parsed as invalid for invalid whole number based numbers&lt;/li&gt;
            &lt;li&gt;Recovery for non-decimal whole numbers if the prefix is given, but no digits are given&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Incompatible Changes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Recovery for non-decimal whole numbers if the prefix is given, but no digits are given&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;h1&gt;v0.1.4&lt;/h1&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;p&gt;Enhancements&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;All valid escape sequences (&lt;code&gt;\&amp;lt;character&amp;gt;&lt;/code&gt;, &lt;code&gt;\x&amp;lt;hexadecimal&amp;gt;&lt;/code&gt;, &lt;code&gt;\x{&amp;lt;hexadecimal&amp;gt;}&lt;/code&gt;,) are recognized.&lt;/li&gt;
            &lt;li&gt;Support for creation of Elixir modules&lt;/li&gt;
            &lt;li&gt;Use pygments' elixir_example.ex supplied by Alexei Sholik for Color Settings Page.&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;?&lt;/code&gt; before any character or valid escape sequence will be recognized as a character token.&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;;&lt;/code&gt; is recognized as EOL. &lt;code&gt;\r\n&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt; style EOL can be escaped with &lt;code&gt;\&lt;/code&gt; and will be treated as whitespace.&lt;/li&gt;
            &lt;li&gt;Operator arity, associativity, and precedence&lt;/li&gt;
            &lt;li&gt;Decimal integers and floats&lt;/li&gt;
            &lt;li&gt;Identifiers (variable, function, and macro names)&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;...&lt;/code&gt; identifier&lt;/li&gt;
            &lt;li&gt;Aliases (module names)&lt;/li&gt;
            &lt;li&gt;Keyword Identifiers&lt;/li&gt;
            &lt;li&gt;Empty Parentheses&lt;/li&gt;
            &lt;li&gt;In Operator&lt;/li&gt;
            &lt;li&gt;Dot Operator&lt;/li&gt;
            &lt;li&gt;Keyword Lists&lt;/li&gt;
            &lt;li&gt;Matched Expressions&lt;/li&gt;
            &lt;li&gt;Regular Keywords (&lt;code&gt;end&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt;, and &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;p&gt;Bug Fixes&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Sigil terminator escapes are recognized, so that sigils are no longer prematurely terminated.&lt;/li&gt;
            &lt;li&gt;Comments do not consume EOL, so trailing comments don't cause error parsing expression on following line.&lt;/li&gt;
            &lt;li&gt;Sigil modifiers now work on groups in addition to heredocs.&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;;&lt;/code&gt; is separate from &lt;code&gt;EOL&lt;/code&gt; and either or both can separate expressions, but only &lt;code&gt;EOL&lt;/code&gt; can separate operators and operands for operations&lt;/li&gt;
          &lt;/ul&gt;
         &lt;/li&gt;
      &lt;/ul&gt;
    
  </change-notes>
  <idea-version since-build="141"/>
  <depends>com.intellij.modules.lang</depends>
  <depends config-file="intellij-erlang-plugin.xml" optional="true">org.jetbrains.erlang</depends>
  <depends config-file="rich-platform-plugin.xml" optional="true">com.intellij.modules.java</depends>
  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="org.elixir_lang.errorreport.Submitter"/>
    <sdkType implementation="org.elixir_lang.sdk.ElixirSdkType"/>
    <moduleConfigurationEditorProvider implementation="org.elixir_lang.module.DefaultModuleEditorsProvider" order="first"/>
    <editorNotificationProvider implementation="org.elixir_lang.inspection.SetupSDKNotificationProvider"/>
    <projectConfigurable instance="org.elixir_lang.settings.ElixirExternalToolsConfigurable"/>
    <projectService serviceImplementation="org.elixir_lang.mix.settings.MixSettings"/>
    <programRunner implementation="org.elixir_lang.mix.runner.MixRunner"/>
    <configurationType implementation="org.elixir_lang.mix.runner.MixRunConfigurationType"/>
    <configurationType implementation="org.elixir_lang.mix.runner.exunit.MixExUnitRunConfigurationType"/>
    <programRunner implementation="org.elixir_lang.mix.runner.exunit.MixExUnitRunner"/>
    <runConfigurationProducer implementation="org.elixir_lang.mix.runner.exunit.MixExUnitRunConfigurationProducer"/>
    <testFinder implementation="org.elixir_lang.mix.TestFinder"/>
    <colorSettingsPage implementation="org.elixir_lang.ElixirColorSettingsPage"/>
    <fileTypeFactory implementation="org.elixir_lang.ElixirFileTypeFactory"/>
    <internalFileTemplate name="Elixir Module"/>
    <internalFileTemplate name="Elixir Application"/>
    <internalFileTemplate name="Elixir Supervisor"/>
    <internalFileTemplate name="Elixir GenServer"/>
    <internalFileTemplate name="Elixir GenEvent"/>
    <defaultLiveTemplatesProvider implementation="org.elixir_lang.templates.ElixirLiveTemplateProvider"/>
    <liveTemplateContext implementation="org.elixir_lang.templates.ElixirContextType"/>
    <additionalTextAttributes file="colorSchemes/ElixirDarcula.xml" scheme="Darcula"/>
    <additionalTextAttributes file="colorSchemes/ElixirDefault.xml" scheme="Default"/>
    <annotator implementationClass="org.elixir_lang.annonator.Alias" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annonator.Atom" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annonator.Callable" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annonator.EscapeSequence" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annonator.Kernel" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annonator.Map" language="Elixir"/>
    <annotator implementationClass="org.elixir_lang.annonator.ModuleAttribute" language="Elixir"/>
    <filetype.decompiler filetype="BEAM" implementationClass="org.elixir_lang.beam.Decompiler"/>
    <fileType.fileViewProviderFactory filetype="BEAM" implementationClass="org.elixir_lang.beam.FileViewProviderFactory"/>
    <filetype.stubBuilder filetype="BEAM" implementationClass="org.elixir_lang.beam.StubBuilder"/>
    <fileTypeFactory implementation="org.elixir_lang.beam.FileTypeFactory"/>
    <structureViewBuilder key="BEAM" factoryClass="org.elixir_lang.beam.StructureViewBuilderProvider"/>
    <stubElementTypeHolder class="org.elixir_lang.beam.psi.stubs.ModuleStubElementTypes"/>
    <syntaxHighlighter key="BEAM" factoryClass="org.elixir_lang.ElixirSyntaxHighlighterFactory"/>
    <completion.contributor implementationClass="org.elixir_lang.code_insight.completion.contributor.CallDefinitionClause" language="Elixir"/>
    <codeInsight.lineMarkerProvider implementationClass="org.elixir_lang.code_insight.line_marker_provider.CallDefinition" language="Elixir"/>
    <elementDescriptionProvider implementation="org.elixir_lang.psi.ElementDescriptionProvider"/>
    <gotoSymbolContributor implementation="org.elixir_lang.navigation.GotoSymbolContributor"/>
    <lang.braceMatcher language="Elixir" implementationClass="org.elixir_lang.code_insight.highlighting.brace_matcher.NonTrivial"/>
    <lang.commenter language="Elixir" implementationClass="org.elixir_lang.ElixirCommenter"/>
    <lang.findUsagesProvider language="Elixir" implementationClass="org.elixir_lang.FindUsagesProvider"/>
    <applicationService serviceInterface="org.elixir_lang.folding.ElixirFoldingSettings" serviceImplementation="org.elixir_lang.folding.ElixirFoldingSettings"/>
    <codeFoldingOptionsProvider instance="org.elixir_lang.folding.OptionsProvider"/>
    <lang.foldingBuilder language="Elixir" implementationClass="org.elixir_lang.folding.Builder"/>
    <lang.parserDefinition language="Elixir" implementationClass="org.elixir_lang.ElixirParserDefinition"/>
    <lang.psiStructureViewFactory language="Elixir" implementationClass="org.elixir_lang.structure_view.Factory"/>
    <lang.quoteHandler language="Elixir" implementationClass="org.elixir_lang.QuoteHandler"/>
    <lang.syntaxHighlighterFactory key="Elixir" implementationClass="org.elixir_lang.ElixirSyntaxHighlighterFactory"/>
    <localInspection displayName="Ambiguous nested calls" enabledByDefault="true" groupName="Elixir" implementationClass="org.elixir_lang.inspection.NoParenthesesManyStrict" language="Elixir" level="ERROR" shortName="NoParenthesesManyStrict"/>
    <localInspection displayName="Ambiguous parentheses" enabledByDefault="true" groupName="Elixir" implementationClass="org.elixir_lang.inspection.NoParenthesesStrict" language="Elixir" level="ERROR" shortName="NoParenthesesStrict"/>
    <localInspection displayName="Keywords Not At End" enabledByDefault="true" groupName="Elixir" implementationClass="org.elixir_lang.inspection.KeywordsNotAtEnd" language="Elixir" level="ERROR" shortName="KeywordsNotAtEnd"/>
    <localInspection displayName="Keyword pair colon (:) used in type spec instead of type operator (::)" enabledByDefault="true" groupName="Elixir" implementationClass="org.elixir_lang.inspection.KeywordPairColonInsteadOfTypeOperator" language="Elixir" level="ERROR" shortName="KeywordPairColonInsteadOfTypeOperator"/>
    <localInspection displayName="Match operator (=) used in type spec instead of type operator (::)" enabledByDefault="true" groupName="Elixir" implementationClass="org.elixir_lang.inspection.MatchOperatorInsteadOfTypeOperator" language="Elixir" level="ERROR" shortName="MatchOperatorInsteadOfTypeOperator"/>
    <renameHandler implementation="org.elixir_lang.refactoring.module_attribute.rename.Handler"/>
    <renameInputValidator implementation="org.elixir_lang.refactoring.module_attribute.rename.InputValidator"/>
    <renamePsiElementProcessor implementation="org.elixir_lang.refactoring.module_attribute.rename.Processor"/>
    <renameHandler implementation="org.elixir_lang.refactoring.variable.rename.Handler"/>
    <renameInputValidator implementation="org.elixir_lang.refactoring.variable.rename.InputValidator"/>
    <renamePsiElementProcessor implementation="org.elixir_lang.refactoring.variable.rename.Processor"/>
    <stubIndex implementation="org.elixir_lang.psi.stub.index.AllName"/>
    <typedHandler implementation="org.elixir_lang.TypedHandler"/>
    <programRunner implementation="org.elixir_lang.debugger.xdebug.ElixirDebugRunner"/>
    <xdebugger.breakpointType implementation="org.elixir_lang.debugger.xdebug.ElixirLineBreakpointType"/>
  </extensions>
  <application-components/>
  <actions>
    <group id="LangElixir.NewActions">
      <separator/>
      <action id="Elixir.NewFile" class="org.elixir_lang.action.CreateElixirModuleAction" text="Elixir File" description="Create new Elixir Module"/>
      <separator/>
      <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewXml"/>
    </group>
  </actions>
</idea-plugin>
